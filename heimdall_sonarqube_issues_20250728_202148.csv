key,rule,severity,type,component,project,file_path,line,message,status,effort,debt,author,tags,creationDate,updateDate,closeDate
AZhSLmwew-UIMmo8ra6X,cpp:S3624,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,52,Customize this class' copy constructor to participate in resource management. Customize or delete its copy assignment operator. Also consider whether move operations should be customized.,OPEN,30min,30min,trevor.bakker@protonmail.com,"cert,leak,pitfall",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6Y,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,89,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@protonmail.com,"confusing,pitfall",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6T,cpp:S1874,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,97,"'gmtime' is deprecated: This function or variable may be unsafe. Consider using gmtime_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.",OPEN,15min,15min,trevor.bakker@protonmail.com,"cert,cwe,obsolete",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6Z,cpp:S1912,BLOCKER,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,97,"Replace this call to the non reentrant function ""gmtime"" by a call to ""gmtime_r"".",OPEN,30min,30min,trevor.bakker@protonmail.com,multi-threading,2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6a,cpp:S6229,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,97,"Replace this use of ""gmtime"" with equivalent code using ""std::chrono"".",OPEN,10min,10min,trevor.bakker@protonmail.com,"confusing,since-c++20",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6b,cpp:S6495,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,98,"""std::print"" or ""std::format"" should be used instead of standard output manipulators",OPEN,5min,5min,trevor.bakker@protonmail.com,"clumsy,performance,since-c++20",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6d,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,107,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@protonmail.com,"confusing,pitfall",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6c,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,109,"Reduce verbosity with ""using enum"" for ""heimdall::SignatureAlgorithm"".",OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++20,2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6f,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,126,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@protonmail.com,"confusing,pitfall",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6e,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,128,"Reduce verbosity with ""using enum"" for ""heimdall::SignatureAlgorithm"".",OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++20,2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6g,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,151,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@protonmail.com,"confusing,pitfall",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6h,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,175,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@protonmail.com,"confusing,pitfall",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6U,cpp:S1117,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,204,declaration shadows a field of 'heimdall::SBOMSigner::Impl',OPEN,5min,5min,trevor.bakker@protonmail.com,"based-on-misra,cert,pitfall,suspicious",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6i,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,261,Refactor this function to reduce its Cognitive Complexity from 29 to the 25 allowed.,OPEN,9min,9min,trevor.bakker@protonmail.com,"architecture,brain-overload",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6j,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,286,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@protonmail.com,brain-overload,2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6k,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,307,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@protonmail.com,brain-overload,2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6V,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,324,"Do not use the constructor's initializer list for data member ""pImpl"". Use the in-class initializer instead.",OPEN,10min,10min,trevor.bakker@protonmail.com,"cppcoreguidelines,performance",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6l,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,333,"Use the init-statement to declare ""init_result"" inside the if statement.",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,since-c++17",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6m,cpp:S859,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,357,const_cast removing const qualification from the type of a pointer may lead to an undefined behaviour.,OPEN,20min,20min,trevor.bakker@protonmail.com,"cert,cppcoreguidelines,misra-c++2008,misra-c2004,misra-c2012,suspicious",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6n,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,382,"Use the init-statement to declare ""init_result"" inside the if statement.",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,since-c++17",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6o,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,424,"Use the init-statement to declare ""init_result"" inside the if statement.",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,since-c++17",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6p,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,508,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++17,2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6q,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,518,"Use the init-statement to declare ""init_result"" inside the if statement.",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,since-c++17",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6r,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,527,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@protonmail.com,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6s,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,569,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@protonmail.com,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6R,cpp:S1135,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,584,"Complete the task associated to this ""TODO"" comment.",OPEN,0min,0min,trevor.bakker@protonmail.com,cwe,2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6W,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,609,"Reduce verbosity with ""using enum"" for ""heimdall::SignatureAlgorithm"".",OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++20,2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6t,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,613,"Use the init-statement to declare ""init_result"" inside the if statement.",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,since-c++17",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6u,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,633,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@protonmail.com,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6w,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,662,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@protonmail.com,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6v,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,675,"Use the init-statement to declare ""sigJson"" inside the if statement.",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,since-c++17",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6S,cpp:S1135,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,692,"Complete the task associated to this ""TODO"" comment.",OPEN,0min,0min,trevor.bakker@protonmail.com,cwe,2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6x,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,707,Refactor this function to reduce its Cognitive Complexity from 58 to the 25 allowed.,OPEN,38min,38min,trevor.bakker@protonmail.com,"architecture,brain-overload",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6y,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,707,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@protonmail.com,"confusing,pitfall",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra61,cpp:S6003,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,718,"Replace this use of ""push_back"" with ""emplace_back"".",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,performance,since-c++11",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra62,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,723,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,trevor.bakker@protonmail.com,based-on-misra,2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra63,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,727,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@protonmail.com,"clumsy,since-c++20",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra64,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,734,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,trevor.bakker@protonmail.com,based-on-misra,2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra65,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,738,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@protonmail.com,"clumsy,since-c++20",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra66,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,745,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,trevor.bakker@protonmail.com,based-on-misra,2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra67,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,749,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@protonmail.com,"clumsy,since-c++20",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra68,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,756,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,trevor.bakker@protonmail.com,based-on-misra,2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra69,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,760,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@protonmail.com,"clumsy,since-c++20",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6-,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,767,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,trevor.bakker@protonmail.com,based-on-misra,2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6_,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,771,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@protonmail.com,"clumsy,since-c++20",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwfw-UIMmo8ra7A,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,778,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,trevor.bakker@protonmail.com,based-on-misra,2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwfw-UIMmo8ra7B,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,782,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@protonmail.com,"clumsy,since-c++20",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwfw-UIMmo8ra7C,cpp:S6003,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,792,"Replace this use of ""push_back"" with ""emplace_back"".",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,performance,since-c++11",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwfw-UIMmo8ra7D,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,797,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,trevor.bakker@protonmail.com,based-on-misra,2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra6z,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,799,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@protonmail.com,brain-overload,2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwfw-UIMmo8ra7E,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,801,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@protonmail.com,"clumsy,since-c++20",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwfw-UIMmo8ra7F,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,808,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,trevor.bakker@protonmail.com,based-on-misra,2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwew-UIMmo8ra60,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,810,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@protonmail.com,brain-overload,2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwfw-UIMmo8ra7G,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,812,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@protonmail.com,"clumsy,since-c++20",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwfw-UIMmo8ra7H,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,823,Refactor this function to reduce its Cognitive Complexity from 29 to the 25 allowed.,OPEN,9min,9min,trevor.bakker@protonmail.com,"architecture,brain-overload",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwfw-UIMmo8ra7I,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,823,"Remove the unused parameter ""originalJson"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@protonmail.com,"based-on-misra,cert,unused",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmwfw-UIMmo8ra7J,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMSigner.cpp,Heimdall-SBOM_heimdall,src/common/SBOMSigner.cpp,884,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@protonmail.com,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLm1Kw-UIMmo8ra7Y,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-sbom.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-sbom.cpp,89,"Replace the redundant type with ""auto"".",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLm1Kw-UIMmo8ra7Z,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-sbom.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-sbom.cpp,90,"Replace the redundant type with ""auto"".",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLm1Kw-UIMmo8ra7a,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-sbom.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-sbom.cpp,91,"Replace the redundant type with ""auto"".",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLm1Kw-UIMmo8ra7b,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-sbom.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-sbom.cpp,93,"Replace the redundant type with ""auto"".",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLm1Kw-UIMmo8ra7c,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-sbom.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-sbom.cpp,95,"Replace the redundant type with ""auto"".",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLm1Lw-UIMmo8ra7d,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-sbom.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-sbom.cpp,97,"Replace the redundant type with ""auto"".",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLm1Lw-UIMmo8ra7e,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-sbom.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-sbom.cpp,99,"Replace the redundant type with ""auto"".",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLm1Lw-UIMmo8ra7f,cpp:S1066,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-sbom.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-sbom.cpp,128,"Merge this ""if"" statement with the enclosing one.",OPEN,5min,5min,trevor.bakker@protonmail.com,clumsy,2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLm1Lw-UIMmo8ra7g,cpp:S1066,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-sbom.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-sbom.cpp,139,"Merge this ""if"" statement with the enclosing one.",OPEN,5min,5min,trevor.bakker@protonmail.com,clumsy,2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLm1Lw-UIMmo8ra7h,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-sbom.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-sbom.cpp,179,Refactor this function to reduce its Cognitive Complexity from 78 to the 25 allowed.,OPEN,58min,58min,trevor.bakker@protonmail.com,"architecture,brain-overload",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLm1Lw-UIMmo8ra7i,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-sbom.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-sbom.cpp,284,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,trevor.bakker@protonmail.com,based-on-misra,2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLm1Lw-UIMmo8ra7j,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-sbom.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-sbom.cpp,405,"Replace the redundant type with ""auto"".",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLm1Lw-UIMmo8ra7k,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-sbom.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-sbom.cpp,406,"Replace the redundant type with ""auto"".",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLm1Lw-UIMmo8ra7l,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-sbom.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-sbom.cpp,407,"Replace the redundant type with ""auto"".",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLm1Lw-UIMmo8ra7m,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-sbom.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-sbom.cpp,409,"Replace the redundant type with ""auto"".",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLm1Lw-UIMmo8ra7n,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-sbom.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-sbom.cpp,411,"Replace the redundant type with ""auto"".",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLm1Lw-UIMmo8ra7o,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-sbom.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-sbom.cpp,413,"Replace the redundant type with ""auto"".",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLm1Lw-UIMmo8ra7p,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-sbom.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-sbom.cpp,415,"Replace the redundant type with ""auto"".",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLm1Lw-UIMmo8ra7q,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-sbom.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-sbom.cpp,417,"Replace the redundant type with ""auto"".",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLm1Lw-UIMmo8ra7r,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-sbom.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-sbom.cpp,420,"Replace the redundant type with ""auto"".",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLm1Lw-UIMmo8ra7s,cpp:S1066,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-sbom.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-sbom.cpp,448,"Merge this ""if"" statement with the enclosing one.",OPEN,5min,5min,trevor.bakker@protonmail.com,clumsy,2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLm1Lw-UIMmo8ra7t,cpp:S1066,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-sbom.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-sbom.cpp,467,"Merge this ""if"" statement with the enclosing one.",OPEN,5min,5min,trevor.bakker@protonmail.com,clumsy,2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLm1Lw-UIMmo8ra7u,cpp:S1066,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-sbom.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-sbom.cpp,478,"Merge this ""if"" statement with the enclosing one.",OPEN,5min,5min,trevor.bakker@protonmail.com,clumsy,2025-07-28 17:55:36,2025-07-28 17:55:53,
AZhSLmvTw-UIMmo8ra6J,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,346,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++17,2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmvTw-UIMmo8ra6K,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,355,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++17,2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmvTw-UIMmo8ra6L,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,364,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++17,2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmvTw-UIMmo8ra6M,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,373,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++17,2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmvTw-UIMmo8ra6N,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,382,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++17,2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmvTw-UIMmo8ra6O,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,391,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++17,2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmvTw-UIMmo8ra6P,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,400,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++17,2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmvTw-UIMmo8ra6Q,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,409,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++17,2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmtgw-UIMmo8ra58,cpp:S1874,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,349,"'getenv' is deprecated: This function or variable may be unsafe. Consider using _dupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.",OPEN,15min,15min,trevor.bakker@uta.edu,"cert,cwe,obsolete",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmtgw-UIMmo8ra59,cpp:S1874,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,350,"'getenv' is deprecated: This function or variable may be unsafe. Consider using _dupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.",OPEN,15min,15min,trevor.bakker@uta.edu,"cert,cwe,obsolete",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmtgw-UIMmo8ra6A,cpp:S1066,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,423,"Merge this ""if"" statement with the enclosing one.",OPEN,5min,5min,trevor.bakker@uta.edu,clumsy,2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmtgw-UIMmo8ra6G,cpp:S1854,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,427,Value stored to 'packageManagerDetected' is never read,OPEN,1min,1min,trevor.bakker@uta.edu,"cert,cwe,symbolic-execution,unused",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmtgw-UIMmo8ra6H,cpp:S1854,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,431,Value stored to 'adaMetadataFound' is never read,OPEN,1min,1min,trevor.bakker@uta.edu,"cert,cwe,symbolic-execution,unused",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmtgw-UIMmo8ra5_,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,440,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmtgw-UIMmo8ra6I,cpp:S1854,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,450,Value stored to 'adaMetadataFound' is never read,OPEN,1min,1min,trevor.bakker@uta.edu,"cert,cwe,symbolic-execution,unused",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmtgw-UIMmo8ra6B,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,989,"Use the init-statement to declare ""copyright"" inside the if statement.",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,since-c++17",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmtgw-UIMmo8ra6D,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,4418,"Use the init-statement to declare ""dotPos"" inside the if statement.",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,since-c++17",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmtgw-UIMmo8ra5-,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,4428,"Reduce verbosity with ""using enum"" for ""heimdall::FileType"".",OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++20,2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmtgw-UIMmo8ra6E,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,4473,"Use the init-statement to declare ""match"" inside the if statement.",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,since-c++17",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmtgw-UIMmo8ra6F,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,4497,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@protonmail.com,"clumsy,since-c++23",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmrUw-UIMmo8ra5x,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1397,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++11,2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmrUw-UIMmo8ra5y,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1451,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++11,2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmrUw-UIMmo8ra5v,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1459,"Use the init-statement to declare ""hasExternalRefs"" inside the if statement.",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,since-c++17",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmrUw-UIMmo8ra5z,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1486,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,cppcoreguidelines,since-c++17",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmrUw-UIMmo8ra5w,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1490,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@protonmail.com,brain-overload,2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmrUw-UIMmo8ra50,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1494,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++11,2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmrUw-UIMmo8ra51,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,2177,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmrUw-UIMmo8ra52,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,2181,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmrUw-UIMmo8ra53,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,2185,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmrUw-UIMmo8ra54,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,2187,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmrUw-UIMmo8ra55,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,2196,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmrUw-UIMmo8ra56,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,2198,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmrUw-UIMmo8ra57,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,2207,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmzCw-UIMmo8ra7L,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,744,"Use the init-statement to declare ""normalizedPath"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmzCw-UIMmo8ra7M,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,757,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmzCw-UIMmo8ra7N,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,761,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmzCw-UIMmo8ra7O,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,762,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmzCw-UIMmo8ra7Q,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,766,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmzCw-UIMmo8ra7R,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,767,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmzCw-UIMmo8ra7P,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,768,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmzCw-UIMmo8ra7S,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,772,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmzCw-UIMmo8ra7T,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,773,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmzCw-UIMmo8ra7U,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,782,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmzCw-UIMmo8ra7V,cpp:S5566,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,896,"Change this raw for-loop to a range for-loop or an ""std::ranges::for_each"".",OPEN,5min,5min,trevor.bakker@protonmail.com,"clumsy,cppcoreguidelines",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmzCw-UIMmo8ra7W,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,898,"Replace the redundant type with ""auto"".",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLmzCw-UIMmo8ra7X,cpp:S6494,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,927,"Use ""std::format"" or ""std::format_to_n"" instead of ""snprintf"".",OPEN,10min,10min,trevor.bakker@protonmail.com,"bad-practice,since-c++20",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLm1rw-UIMmo8ra7v,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,248,Refactor this function to reduce its Cognitive Complexity from 43 to the 25 allowed.,OPEN,23min,23min,trevor.bakker@protonmail.com,"architecture,brain-overload",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLm1rw-UIMmo8ra7x,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,261,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,trevor.bakker@uta.edu,based-on-misra,2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLm1rw-UIMmo8ra7y,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,265,Extract the assignment from this expression.,OPEN,5min,5min,trevor.bakker@protonmail.com,"based-on-misra,cert,cwe,suspicious",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLm1rw-UIMmo8ra7z,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,269,Extract the assignment from this expression.,OPEN,5min,5min,trevor.bakker@protonmail.com,"based-on-misra,cert,cwe,suspicious",2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhSLm1rw-UIMmo8ra7w,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,359,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@protonmail.com,brain-overload,2025-07-28 17:34:07,2025-07-28 17:52:16,
AZhNlQTZ8ge9ypacCWq0,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,256,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@protonmail.com,"performance,since-c++14",2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhNlQTZ8ge9ypacCWq1,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,260,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++11,2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhNlQTZ8ge9ypacCWq2,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,279,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++11,2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhNlQTZ8ge9ypacCWq3,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,296,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++11,2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhNlQTZ8ge9ypacCWq4,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,305,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++11,2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhNlQTZ8ge9ypacCWq5,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,315,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++11,2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhNlQTZ8ge9ypacCWq6,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,617,Refactor this function to reduce its Cognitive Complexity from 68 to the 25 allowed.,OPEN,48min,48min,trevor.bakker@protonmail.com,"architecture,brain-overload",2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhNlQTZ8ge9ypacCWq8,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,687,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++11,2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhNlQTZ8ge9ypacCWq7,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,728,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@protonmail.com,brain-overload,2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhNlQTZ8ge9ypacCWq9,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,735,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++11,2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhNlQTZ8ge9ypacCWq-,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,736,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++11,2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhNlQTZ8ge9ypacCWq_,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,751,Refactor this function to reduce its Cognitive Complexity from 37 to the 25 allowed.,OPEN,17min,17min,trevor.bakker@protonmail.com,"architecture,brain-overload",2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhNlQTZ8ge9ypacCWrC,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,773,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++11,2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhNlQTZ8ge9ypacCWrD,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,774,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++11,2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhNlQTZ8ge9ypacCWrE,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,788,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++11,2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhNlQTZ8ge9ypacCWrA,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,821,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@protonmail.com,brain-overload,2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhNlQTZ8ge9ypacCWrF,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,826,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++11,2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhNlQTZ8ge9ypacCWrB,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,828,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@protonmail.com,brain-overload,2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhNlQRL8ge9ypacCWqr,cpp:S107,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.hpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.hpp,120,"This function has 19 parameters, which is greater than the 7 authorized.",OPEN,20min,20min,trevor.bakker@protonmail.com,brain-overload,2025-07-27 18:36:25,2025-07-28 17:55:53,
AZhNlQS28ge9ypacCWqv,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1202,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhNlQS28ge9ypacCWqw,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1216,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhNlQS28ge9ypacCWqs,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1221,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@protonmail.com,brain-overload,2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhNlQS28ge9ypacCWqt,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1228,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@protonmail.com,brain-overload,2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhNlQS28ge9ypacCWqx,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1234,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++11,2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhNlQS28ge9ypacCWqu,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1237,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@protonmail.com,brain-overload,2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhNlQS28ge9ypacCWqy,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1243,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhNlQS28ge9ypacCWqz,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1364,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++11,2025-07-27 18:36:25,2025-07-27 19:59:59,
AZhMx7yi3D7gjEUwKco3,cpp:S1186,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,471,"Add a nested comment explaining why this method is empty, or complete the implementation.",OPEN,5min,5min,trevor.bakker@protonmail.com,suspicious,2025-07-27 16:40:59,2025-07-27 16:40:59,
AZhMx73f3D7gjEUwKcpE,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,76,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,trevor.bakker@uta.edu,"bad-practice,clumsy,cppcoreguidelines",2025-07-27 16:22:17,2025-07-27 16:28:57,
AZhMx73f3D7gjEUwKcpF,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,93,"Use ""std::byte"" for byte-oriented memory access.",OPEN,5min,5min,trevor.bakker@uta.edu,"clumsy,pitfall,since-c++17",2025-07-27 16:22:17,2025-07-27 16:28:57,
AZhMx73f3D7gjEUwKcpD,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,107,"Reduce verbosity with ""using enum"" for ""heimdall::FileType"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++20,2025-07-27 16:22:17,2025-07-27 16:28:57,
AZhMx73f3D7gjEUwKcpH,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,134,"Use ""std::byte"" for byte-oriented memory access.",OPEN,5min,5min,trevor.bakker@uta.edu,"clumsy,pitfall,since-c++17",2025-07-27 16:22:17,2025-07-27 16:28:57,
AZhMx73f3D7gjEUwKcpI,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,154,"Use ""std::byte"" for byte-oriented memory access.",OPEN,5min,5min,trevor.bakker@uta.edu,"clumsy,pitfall,since-c++17",2025-07-27 16:22:17,2025-07-27 16:28:57,
AZhMx73f3D7gjEUwKcpG,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,172,"Reduce verbosity with ""using enum"" for ""heimdall::FileType"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++20,2025-07-27 16:22:17,2025-07-27 16:28:57,
AZhMx73f3D7gjEUwKcpJ,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,229,"Use the init-statement to declare ""elfType"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 16:22:17,2025-07-27 16:28:57,
AZhMx72k3D7gjEUwKco-,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1045,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 16:22:17,2025-07-27 16:28:57,
AZhMx72k3D7gjEUwKco6,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1065,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 16:22:17,2025-07-27 16:28:57,
AZhMx72k3D7gjEUwKco_,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1082,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 16:22:17,2025-07-27 16:28:57,
AZhMx72k3D7gjEUwKco7,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1085,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 16:22:17,2025-07-27 16:28:57,
AZhMx72k3D7gjEUwKcpA,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1142,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 16:22:17,2025-07-27 16:28:57,
AZhMx72k3D7gjEUwKco8,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1159,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 16:22:17,2025-07-27 16:28:57,
AZhMx72k3D7gjEUwKco9,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1176,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 16:22:17,2025-07-27 16:28:57,
AZhMx72k3D7gjEUwKcpC,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1385,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@uta.edu,since-c++11,2025-07-27 16:22:17,2025-07-27 16:28:57,
AZhMG7po8ge9ypac7MnG,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,76,"Do not assign data members in a constructor. Initialize member ""optimizationFlags"" in an initialization list.",OPEN,10min,10min,trevor.bakker@uta.edu,"cppcoreguidelines,performance",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MnH,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,122,"Use the init-statement to declare ""functions"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MnL,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,122,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MnM,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,128,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MnI,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,132,"Use the init-statement to declare ""crossRefs"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MnJ,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,139,"Use the init-statement to declare ""types"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MnK,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,146,"Use the init-statement to declare ""securityFlags"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MnS,cpp:S1066,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,217,"Merge this ""if"" statement with the enclosing one.",OPEN,5min,5min,trevor.bakker@uta.edu,clumsy,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MnN,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,249,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MnO,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,269,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MnT,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,285,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MnP,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,290,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MnU,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,306,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MnQ,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,311,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MnR,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,324,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MnV,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,381,"Use ""starts_with()"" to check the prefix of the string.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MnW,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,387,"Use ""starts_with()"" to check the prefix of the string.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MnX,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,393,"Use ""starts_with()"" to check the prefix of the string.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MnY,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,393,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MnZ,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,404,"Use ""starts_with()"" to check the prefix of the string.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mna,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,404,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mnb,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,413,"Use ""starts_with()"" to check the prefix of the string.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mnc,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,413,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mnd,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,437,"Use ""starts_with()"" to check the prefix of the string.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mne,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,465,"Use ""starts_with()"" to check the prefix of the string.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mnf,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,465,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mng,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,481,"Use ""starts_with()"" to check the prefix of the string.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mnh,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,485,"Use ""starts_with()"" to check the prefix of the string.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mni,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,496,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mnj,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,498,"Use ""ends_with()"" to check the postfix of the string.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mnk,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,512,Refactor this function to reduce its Cognitive Complexity from 86 to the 25 allowed.,OPEN,1h6min,1h6min,trevor.bakker@uta.edu,"architecture,brain-overload",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mnq,cpp:S1141,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,607,Extract this nested try block into a separate method.,OPEN,20min,20min,trevor.bakker@uta.edu,"confusing,error-handling",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mnu,cpp:S6229,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,624,"Replace this use of ""time"" with equivalent code using ""std::chrono"".",OPEN,10min,10min,trevor.bakker@uta.edu,"confusing,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mnr,cpp:S1141,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,637,Extract this nested try block into a separate method.,OPEN,20min,20min,trevor.bakker@uta.edu,"confusing,error-handling",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mnv,cpp:S6229,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,655,"Replace this use of ""time"" with equivalent code using ""std::chrono"".",OPEN,10min,10min,trevor.bakker@uta.edu,"confusing,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mnl,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,657,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mnm,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,680,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mnn,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,697,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mno,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,710,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mnt,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,733,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mns,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,747,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mnp,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,759,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MnB,cpp:S1117,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,769,declaration shadows a field of 'heimdall::AdaExtractor',OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,pitfall,suspicious",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mnx,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,779,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mnw,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,786,"Use the init-statement to declare ""versionInfo"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mny,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,796,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MnC,cpp:S1117,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,845,declaration shadows a local variable,OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,pitfall,suspicious",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mn0,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,847,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mnz,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,850,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mn1,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,865,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MnD,cpp:S1117,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,880,declaration shadows a local variable,OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,pitfall,suspicious",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mn3,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,882,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mn4,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,882,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mn2,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,886,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mn5,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,898,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mn6,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,906,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mn7,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,928,"Use ""starts_with()"" to check the prefix of the string.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mn-,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,944,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mn9,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,944,"Use ""starts_with()"" to check the prefix of the string.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mn8,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,958,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MnE,cpp:S1117,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,958,declaration shadows a local variable,OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,pitfall,suspicious",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7Mn_,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,960,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MnF,cpp:S1117,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,980,declaration shadows a field of 'heimdall::AdaExtractor',OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,pitfall,suspicious",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MoA,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,987,"Use ""starts_with()"" to check the prefix of the string.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MoB,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,1002,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@uta.edu,"performance,since-c++14",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MoC,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,1009,"Use ""starts_with()"" to check the prefix of the string.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MoE,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,1091,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MoD,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,1099,"Use the init-statement to declare ""flag"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MoF,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,1117,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@uta.edu,"performance,since-c++14",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MoG,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,1148,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MoH,cpp:S5566,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,1150,"Replace this range for-loop by ""std::ranges::contains"".",OPEN,5min,5min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MoI,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,1175,"Use ""ends_with()"" to check the postfix of the string.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MoJ,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,1198,"Use the init-statement to declare ""filename"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MoL,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,1198,"Use ""ends_with()"" to check the postfix of the string.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MoK,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,1214,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7po8ge9ypac7MoM,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,1218,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7oY8ge9ypac7Mm9,cpp:S1820,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.hpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.hpp,140,"Refactor this structure so it has no more than 20 fields, rather than the 38 it currently has.",OPEN,1h,1h,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-28 17:55:53,
AZhMG7oY8ge9ypac7Mm_,cpp:S5018,BLOCKER,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.hpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.hpp,140,"Give class ""ComponentInfo"" a noexcept move constructor.",OPEN,2min,2min,trevor.bakker@uta.edu,"cppcoreguidelines,error-handling,since-c++11",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7oY8ge9ypac7Mm-,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.hpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.hpp,168,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@uta.edu,"performance,since-c++14",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7nZ8ge9ypac7Mms,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,579,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7nZ8ge9ypac7Mmt,cpp:S2738,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,587,"""catch"" a specific exception type.",OPEN,20min,20min,trevor.bakker@uta.edu,error-handling,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7nZ8ge9ypac7Mmu,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,641,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7nZ8ge9ypac7Mmv,cpp:S2738,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,648,"""catch"" a specific exception type.",OPEN,20min,20min,trevor.bakker@uta.edu,error-handling,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7nZ8ge9ypac7Mmw,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,758,"Make the type of this parameter a reference-to-const. The current type of ""sourceFiles"" is ""class std::vector<class std::basic_string<char> > &"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7nZ8ge9ypac7Mmx,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,909,"Make the type of this parameter a reference-to-const. The current type of ""functions"" is ""class std::vector<class std::basic_string<char> > &"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7nZ8ge9ypac7Mmy,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,1017,"Use the init-statement to declare ""context"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7nZ8ge9ypac7Mm0,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,1025,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7nZ8ge9ypac7Mmz,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,1036,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7nZ8ge9ypac7Mm1,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,1056,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7nZ8ge9ypac7Mm2,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,1058,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7nZ8ge9ypac7Mm3,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,1060,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7oy8ge9ypac7MnA,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LazySymbolExtractor.cpp,Heimdall-SBOM_heimdall,src/common/LazySymbolExtractor.cpp,165,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7rn8ge9ypac7Mpc,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,766,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7rn8ge9ypac7Mpa,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,784,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7rn8ge9ypac7Mpb,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,793,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7rn8ge9ypac7Mpd,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,825,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7rn8ge9ypac7Mpe,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,838,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7rn8ge9ypac7MpZ,cpp:S1117,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,840,declaration shadows a local variable,OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,pitfall,suspicious",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7rn8ge9ypac7Mpf,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,971,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,pitfall",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7rn8ge9ypac7Mpg,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,1001,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,pitfall",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7rn8ge9ypac7Mph,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,1026,"Use ""std::byte"" for byte-oriented data manipulation.",OPEN,5min,5min,trevor.bakker@uta.edu,"clumsy,pitfall,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7rn8ge9ypac7Mpi,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,1049,"Use ""std::byte"" for byte-oriented data manipulation.",OPEN,5min,5min,trevor.bakker@uta.edu,"clumsy,pitfall,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7rn8ge9ypac7Mpj,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,1057,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,pitfall",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7rn8ge9ypac7Mpk,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,1082,"Use ""std::byte"" for byte-oriented data manipulation.",OPEN,5min,5min,trevor.bakker@uta.edu,"clumsy,pitfall,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mjo,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,215,Refactor this function to reduce its Cognitive Complexity from 93 to the 25 allowed.,OPEN,1h13min,1h13min,trevor.bakker@uta.edu,"architecture,brain-overload",2025-07-27 05:03:35,2025-07-28 17:55:53,
AZhMG7l-8ge9ypac7Mjr,cpp:S1066,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,228,"Merge this ""if"" statement with the enclosing one.",OPEN,5min,5min,trevor.bakker@uta.edu,clumsy,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mjm,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,327,"Use the init-statement to declare ""lastSlash"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mjn,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,388,"Use the init-statement to declare ""dir"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mjs,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,396,"Use ""ends_with()"" to check the postfix of the string.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mjp,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,423,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mjt,cpp:S1066,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,442,"Merge this ""if"" statement with the enclosing one.",OPEN,5min,5min,trevor.bakker@uta.edu,clumsy,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mjq,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,498,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mjv,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,625,Refactor this function to reduce its Cognitive Complexity from 36 to the 25 allowed.,OPEN,16min,16min,trevor.bakker@uta.edu,"architecture,brain-overload",2025-07-27 05:03:35,2025-07-27 16:45:26,
AZhMG7l-8ge9ypac7Mju,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,681,"Use the init-statement to declare ""fileName"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mjx,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,685,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mjw,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,689,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mjy,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,737,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mj0,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,822,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mjz,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,822,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mj1,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,880,"Use the init-statement to declare ""version"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mj2,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,887,"Use the init-statement to declare ""packageName"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mj3,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,902,"Use the init-statement to declare ""version"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mj4,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,909,"Use the init-statement to declare ""packageName"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mj5,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,955,"Use the init-statement to declare ""packageName"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mj6,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1043,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mj7,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1045,"Use ""ends_with()"" to check the postfix of the string.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkB,cpp:S1141,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1110,Extract this nested try block into a separate method.,OPEN,20min,20min,trevor.bakker@uta.edu,"confusing,error-handling",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkF,cpp:S6229,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1126,"Replace this use of ""time"" with equivalent code using ""std::chrono"".",OPEN,10min,10min,trevor.bakker@uta.edu,"confusing,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkC,cpp:S1141,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1139,Extract this nested try block into a separate method.,OPEN,20min,20min,trevor.bakker@uta.edu,"confusing,error-handling",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkG,cpp:S6229,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1156,"Replace this use of ""time"" with equivalent code using ""std::chrono"".",OPEN,10min,10min,trevor.bakker@uta.edu,"confusing,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mj8,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1158,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mj9,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1181,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mj-,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1198,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mj_,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1211,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkE,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1234,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkD,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1248,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkA,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1260,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkH,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1272,"Remove the unused parameter ""batch_size"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkI,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1290,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkJ,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1394,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkK,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1446,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkL,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1446,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkM,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1446,"Remove the unused parameter ""symbols"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkN,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1446,"Make the type of this parameter a reference-to-const. The current type of ""symbols"" is ""class std::vector<struct heimdall::SymbolInfo> &"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkO,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1623,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkP,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1623,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkQ,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1623,"Remove the unused parameter ""sections"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkR,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1623,"Make the type of this parameter a reference-to-const. The current type of ""sections"" is ""class std::vector<struct heimdall::SectionInfo> &"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkS,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1732,"Use the init-statement to declare ""match"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkT,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1741,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkU,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1741,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkV,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1741,"Remove the unused parameter ""buildId"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkW,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1741,"Make the type of this parameter a reference-to-const. The current type of ""buildId"" is ""class std::basic_string<char> &"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkX,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1866,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkY,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1866,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MkZ,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1956,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mka,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1956,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mkb,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1956,"Remove the unused parameter ""symbols"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mkc,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1956,"Make the type of this parameter a reference-to-const. The current type of ""symbols"" is ""class std::vector<struct heimdall::SymbolInfo> &"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mkd,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2078,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mke,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2078,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mkf,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2078,"Remove the unused parameter ""sections"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mkg,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2078,"Make the type of this parameter a reference-to-const. The current type of ""sections"" is ""class std::vector<struct heimdall::SectionInfo> &"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mkh,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2172,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mki,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2172,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mkj,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2172,"Remove the unused parameter ""version"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mkk,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2172,"Make the type of this parameter a reference-to-const. The current type of ""version"" is ""class std::basic_string<char> &"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mkl,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2333,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mkm,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2333,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mkn,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2333,"Remove the unused parameter ""uuid"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mko,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2333,"Make the type of this parameter a reference-to-const. The current type of ""uuid"" is ""class std::basic_string<char> &"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mkp,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2438,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mkq,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2439,"Remove the unused parameter ""symbols"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mkr,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2439,"Make the type of this parameter a reference-to-const. The current type of ""symbols"" is ""class std::vector<struct heimdall::SymbolInfo> &"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mks,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2446,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mkt,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2447,"Remove the unused parameter ""sections"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mku,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2447,"Make the type of this parameter a reference-to-const. The current type of ""sections"" is ""class std::vector<struct heimdall::SectionInfo> &"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mkv,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2454,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mkw,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2454,"Remove the unused parameter ""version"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mkx,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2454,"Make the type of this parameter a reference-to-const. The current type of ""version"" is ""class std::basic_string<char> &"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mk0,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2461,"Make the type of this parameter a reference-to-const. The current type of ""company"" is ""class std::basic_string<char> &"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mky,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2461,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mkz,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2461,"Remove the unused parameter ""company"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mk1,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2507,"Use the init-statement to declare ""nullPos"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mk2,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2544,"Use the init-statement to declare ""nullPos"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mk3,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2576,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mk4,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2588,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mk5,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2686,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,trevor.bakker@uta.edu,based-on-misra,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mk7,cpp:S924,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2730,"Reduce the number of nested ""break"" statements from 5 to 1 authorized.",OPEN,20min,20min,trevor.bakker@uta.edu,"based-on-misra,confusing",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mk6,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2742,"Use the init-statement to declare ""memberName"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mk9,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2752,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mk8,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2765,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mk-,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2810,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mk_,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2812,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlA,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2814,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlB,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2912,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlC,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2928,"Use the init-statement to declare ""normalizedPath"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlD,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2928,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlE,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2932,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlF,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2936,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlG,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2940,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlH,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2944,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlI,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2958,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlJ,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2962,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlK,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2966,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlL,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2970,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlM,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2974,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlN,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3056,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlO,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3056,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlQ,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3081,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlP,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3096,"Use the init-statement to declare ""match"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlS,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3121,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlR,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3136,"Use the init-statement to declare ""match"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlU,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3160,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlT,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3175,"Use the init-statement to declare ""match"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlV,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3197,"Use the init-statement to declare ""dirName"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlX,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3197,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlY,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3197,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlZ,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3215,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mlg,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3222,"Use the init-statement to declare ""packageName"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mla,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3240,"Use the init-statement to declare ""dirName"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mld,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3240,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mle,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3240,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mlc,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3253,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mlf,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3265,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mlb,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3271,"Use the init-statement to declare ""packageName"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mlh,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3290,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mli,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3290,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mlj,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3308,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MlW,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3314,"Use the init-statement to declare ""packageName"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mlk,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3325,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mll,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3327,"Use ""ends_with()"" to check the postfix of the string.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mln,cpp:S6229,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3382,"Replace this use of ""time"" with equivalent code using ""std::chrono"".",OPEN,10min,10min,trevor.bakker@uta.edu,"confusing,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mlm,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3427,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mlo,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3457,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mlp,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3457,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mlq,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3479,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mlr,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3479,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mls,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3490,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mlt,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3490,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mlu,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3605,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mlv,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3605,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mlw,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3605,"Remove the unused parameter ""codeSignInfo"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mlx,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3605,"Make the type of this parameter a reference-to-const. The current type of ""codeSignInfo"" is ""struct heimdall::CodeSignInfo &"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Ml0,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3701,"Remove the unused parameter ""buildConfig"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Ml1,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3701,"Make the type of this parameter a reference-to-const. The current type of ""buildConfig"" is ""struct heimdall::BuildConfigInfo &"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mly,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3701,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Mlz,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3701,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Ml2,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3837,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Ml3,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3837,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Ml4,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3837,"Remove the unused parameter ""platformInfo"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Ml5,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3837,"Make the type of this parameter a reference-to-const. The current type of ""platformInfo"" is ""struct heimdall::PlatformInfo &"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Ml6,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3927,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Ml7,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3927,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Ml8,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3927,"Remove the unused parameter ""entitlements"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Ml9,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3927,"Make the type of this parameter a reference-to-const. The current type of ""entitlements"" is ""class std::vector<class std::basic_string<char> > &"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Ml-,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,4026,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7Ml_,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,4026,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MmA,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,4027,"Remove the unused parameter ""architectures"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MmB,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,4027,"Make the type of this parameter a reference-to-const. The current type of ""architectures"" is ""class std::vector<struct heimdall::ArchitectureInfo> &"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MmC,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,4157,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MmD,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,4157,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MmE,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,4157,"Remove the unused parameter ""frameworks"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MmF,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,4157,"Make the type of this parameter a reference-to-const. The current type of ""frameworks"" is ""class std::vector<class std::basic_string<char> > &"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MmG,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,4272,Refactor this function to reduce its Cognitive Complexity from 29 to the 25 allowed.,OPEN,9min,9min,trevor.bakker@uta.edu,"architecture,brain-overload",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MmH,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,4278,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MmI,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,4288,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MmJ,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,4311,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MmK,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,4318,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MmL,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,4325,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7l-8ge9ypac7MmM,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,4337,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhSLmyGw-UIMmo8ra7K,cpp:S1448,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.hpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.hpp,43,"Class has 41 methods, which is greater than the 35 authorized. Split it into smaller classes.",OPEN,1h,1h,trevor.bakker@uta.edu,"architecture,brain-overload",2025-07-27 05:03:35,2025-07-28 17:52:16,
AZhMG7nr8ge9ypac7Mm4,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.cpp,Heimdall-SBOM_heimdall,src/common/Profiler.cpp,32,"Use the init-statement to declare ""pmc"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7nr8ge9ypac7Mm5,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.cpp,Heimdall-SBOM_heimdall,src/common/Profiler.cpp,321,"Do not use the constructor's initializer list for data member ""cpu_usage_percent_"". Use the in-class initializer instead.",OPEN,10min,10min,trevor.bakker@uta.edu,"cppcoreguidelines,performance",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7nr8ge9ypac7Mm6,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.cpp,Heimdall-SBOM_heimdall,src/common/Profiler.cpp,349,"Use the init-statement to declare ""elapsed"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7nr8ge9ypac7Mm7,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.cpp,Heimdall-SBOM_heimdall,src/common/Profiler.cpp,379,"Use the init-statement to declare ""total_diff"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7rD8ge9ypac7MpS,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,154,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@uta.edu,since-c++11,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7rD8ge9ypac7MpU,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,358,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7rD8ge9ypac7MpV,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,578,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7rD8ge9ypac7MpW,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,599,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7rD8ge9ypac7MpX,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,618,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7rD8ge9ypac7MpQ,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,940,"Reduce verbosity with ""using enum"" for ""heimdall::SBOMDifference::Type"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++20,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7rD8ge9ypac7MpY,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,952,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7rD8ge9ypac7MpR,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,972,"Reduce verbosity with ""using enum"" for ""heimdall::SBOMDifference::Type"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++20,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MoS,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,214,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@uta.edu,"performance,since-c++14",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MoQ,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,227,"Do not use the constructor's initializer list for data member ""pImpl"". Use the in-class initializer instead.",OPEN,10min,10min,trevor.bakker@uta.edu,"cppcoreguidelines,performance",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MoT,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,241,Refactor this function to reduce its Cognitive Complexity from 47 to the 25 allowed.,OPEN,27min,27min,trevor.bakker@uta.edu,"architecture,brain-overload",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MoZ,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,247,"Use ""contains"" member function.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MoU,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,275,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MoV,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,291,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Moa,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,291,"Use ""contains"" member function.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MoW,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,303,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MoX,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,313,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MoY,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,329,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mob,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,438,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Moc,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,456,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mod,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,465,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Moe,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,505,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mof,cpp:S5566,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,507,"Replace this range for-loop by ""std::ranges::contains"".",OPEN,5min,5min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mog,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,507,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Moh,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,528,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MoR,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,533,"Reduce verbosity with ""using enum"" for ""heimdall::FileType"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++20,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MoN,cpp:S1117,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,572,declaration shadows a field of 'heimdall::SBOMGenerator::Impl',OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,pitfall,suspicious",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MoO,cpp:S1117,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,600,declaration shadows a field of 'heimdall::SBOMGenerator::Impl',OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,pitfall,suspicious",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MoP,cpp:S1117,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,624,declaration shadows a field of 'heimdall::SBOMGenerator::Impl',OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,pitfall,suspicious",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Moi,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,644,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Moj,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,665,Refactor this function to reduce its Cognitive Complexity from 39 to the 25 allowed.,OPEN,19min,19min,trevor.bakker@uta.edu,"architecture,brain-overload",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mom,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,693,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mok,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,715,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mon,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,732,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mol,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,737,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Moo,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,755,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mop,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,767,"Use ""contains"" member function.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Moq,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,812,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mor,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,837,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mos,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,856,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mot,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,865,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@uta.edu,since-c++11,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mou,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,871,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mov,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,878,"Use ""contains"" member function.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mow,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,883,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@uta.edu,since-c++11,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mox,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,885,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@uta.edu,since-c++11,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Moy,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,956,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Moz,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,975,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mo0,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,984,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@uta.edu,since-c++11,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mo1,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,990,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mo2,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,997,"Use ""contains"" member function.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mo3,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1002,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@uta.edu,since-c++11,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mo4,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1004,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@uta.edu,since-c++11,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mo5,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1017,Refactor this function to reduce its Cognitive Complexity from 122 to the 25 allowed.,OPEN,1h42min,1h42min,trevor.bakker@uta.edu,"architecture,brain-overload",2025-07-27 05:03:35,2025-07-27 20:26:56,
AZhMG7qS8ge9ypac7Mo6,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1051,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mo7,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1062,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mo8,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1156,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMx72k3D7gjEUwKcpB,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1173,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mo9,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1186,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7Mo_,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1352,Refactor this function to reduce its Cognitive Complexity from 59 to the 25 allowed.,OPEN,39min,39min,trevor.bakker@uta.edu,"architecture,brain-overload",2025-07-27 05:03:35,2025-07-28 17:55:53,
AZhMG7qS8ge9ypac7MpA,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1646,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MpB,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1722,Refactor this function to reduce its Cognitive Complexity from 86 to the 25 allowed.,OPEN,1h6min,1h6min,trevor.bakker@uta.edu,"architecture,brain-overload",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MpD,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1734,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MpC,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,2043,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MpE,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,2126,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MpF,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,2130,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MpG,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,2134,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MpH,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,2136,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MpI,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,2145,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MpJ,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,2147,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MpK,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,2156,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MpM,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,2227,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@uta.edu,"performance,since-c++14",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MpN,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,2232,"Use ""contains"" member function.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MpO,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,2238,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MpL,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,2259,"Use the init-statement to declare ""canonicalPath"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7qS8ge9ypac7MpP,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,2267,"Use ""contains"" member function.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7MmS,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,129,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7MmN,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,145,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7MmO,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,149,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7MmR,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,168,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7MmP,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,181,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7MmQ,cpp:S2738,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,186,"""catch"" a specific exception type.",OPEN,20min,20min,trevor.bakker@uta.edu,error-handling,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7MmT,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,194,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7MmU,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,205,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,pitfall",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7MmV,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,214,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@uta.edu,"performance,since-c++14",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7MmW,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,233,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@uta.edu,"performance,since-c++14",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7MmX,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,304,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,pitfall",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7MmZ,cpp:S1141,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,350,Extract this nested try block into a separate method.,OPEN,20min,20min,trevor.bakker@uta.edu,"confusing,error-handling",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7Mma,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,360,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7MmY,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,367,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7Mmb,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,375,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,pitfall",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7Mmc,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,382,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,pitfall",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7Mmd,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,417,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7Mme,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,428,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,pitfall",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7Mmf,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,428,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7Mmg,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,455,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7Mmh,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,518,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,pitfall",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7Mmi,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,518,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7Mmj,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,522,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7Mmk,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,526,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7Mml,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,530,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7Mmm,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,534,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7Mmn,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,538,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7Mmo,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,563,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,pitfall",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7Mmp,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,563,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7Mmq,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,568,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,pitfall",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7m38ge9ypac7Mmr,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,576,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7sz8ge9ypac7Mpl,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/PerformanceBenchmark.cpp,Heimdall-SBOM_heimdall,src/tools/PerformanceBenchmark.cpp,34,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,trevor.bakker@uta.edu,"based-on-misra,cppcoreguidelines",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7sz8ge9ypac7Mpm,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/PerformanceBenchmark.cpp,Heimdall-SBOM_heimdall,src/tools/PerformanceBenchmark.cpp,90,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,trevor.bakker@uta.edu,"based-on-misra,cppcoreguidelines",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7sz8ge9ypac7Mpn,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/PerformanceBenchmark.cpp,Heimdall-SBOM_heimdall,src/tools/PerformanceBenchmark.cpp,143,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,trevor.bakker@uta.edu,"based-on-misra,cppcoreguidelines",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7sz8ge9ypac7Mpo,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/PerformanceBenchmark.cpp,Heimdall-SBOM_heimdall,src/tools/PerformanceBenchmark.cpp,195,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,trevor.bakker@uta.edu,"based-on-misra,cppcoreguidelines",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7sz8ge9ypac7Mpp,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/PerformanceBenchmark.cpp,Heimdall-SBOM_heimdall,src/tools/PerformanceBenchmark.cpp,256,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,trevor.bakker@uta.edu,"based-on-misra,cppcoreguidelines",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7sz8ge9ypac7Mpq,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/PerformanceBenchmark.cpp,Heimdall-SBOM_heimdall,src/tools/PerformanceBenchmark.cpp,311,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,trevor.bakker@uta.edu,"based-on-misra,cppcoreguidelines",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7tG8ge9ypac7Mpr,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,92,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7tG8ge9ypac7Mps,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,456,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,trevor.bakker@uta.edu,based-on-misra,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7tG8ge9ypac7Mpt,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,522,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,trevor.bakker@uta.edu,based-on-misra,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhMG7tG8ge9ypac7Mpu,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,583,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,trevor.bakker@uta.edu,based-on-misra,2025-07-27 05:03:35,2025-07-27 12:58:44,
AZhJ2Z6H8ge9ypacyIlg,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,264,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@protonmail.com,"performance,since-c++14",2025-07-27 03:00:55,2025-07-27 03:00:55,
AZhJ2Z6H8ge9ypacyIlR,cpp:S1117,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,287,declaration shadows a local variable,OPEN,5min,5min,trevor.bakker@protonmail.com,"based-on-misra,cert,pitfall,suspicious",2025-07-27 03:00:55,2025-07-27 03:00:55,
AZhJ2Z6H8ge9ypacyImI,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1447,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++11,2025-07-27 03:00:55,2025-07-27 03:00:55,
AZhJ2Z6H8ge9ypacyIlV,cpp:S1117,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,2258,declaration shadows a local variable,OPEN,5min,5min,trevor.bakker@protonmail.com,"based-on-misra,cert,pitfall,suspicious",2025-07-27 03:00:55,2025-07-27 03:00:55,
AZhEuX-SdRthvKUGuXPI,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,66,"Do not assign data members in a constructor. Initialize member ""runtimePackages"" in an initialization list.",OPEN,10min,10min,trevor.bakker@uta.edu,"cppcoreguidelines,performance",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuYBOdRthvKUGuXSL,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.hpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.hpp,210,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@uta.edu,"performance,since-c++14",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBOdRthvKUGuXSM,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.hpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.hpp,355,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@uta.edu,"performance,since-c++14",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYAMdRthvKUGuXRo,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,197,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYAMdRthvKUGuXRp,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,197,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYAMdRthvKUGuXRq,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,217,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYAMdRthvKUGuXRl,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,259,"Remove this use of the constructor's initializer list for data member ""isStripped"". It is redundant with the in-class initializer.",OPEN,10min,10min,trevor.bakker@uta.edu,"cppcoreguidelines,performance",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYAMdRthvKUGuXRr,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,292,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYAMdRthvKUGuXRs,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,301,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYAMdRthvKUGuXRt,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,310,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYAMdRthvKUGuXRu,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,319,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYAMdRthvKUGuXRv,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,328,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYAMdRthvKUGuXRw,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,337,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYAMdRthvKUGuXRx,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,426,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYAMdRthvKUGuXRy,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,446,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYAMdRthvKUGuXRz,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,514,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYAMdRthvKUGuXRm,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,515,"Reduce verbosity with ""using enum"" for ""heimdall::FileType"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++20,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYAMdRthvKUGuXRn,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,564,"Reduce verbosity with ""using enum"" for ""heimdall::LinkerType"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++20,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX7ldRthvKUGuXOM,cpp:S1188,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,76,"This lambda has 79 lines, which is greater than the 20 lines authorized. Split it into several lambdas or functions, or make it a named function.",OPEN,20min,20min,trevor.bakker@uta.edu,since-c++11,2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX7ldRthvKUGuXON,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,202,"Use the init-statement to declare ""context"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX7ldRthvKUGuXOO,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,251,"Use the init-statement to declare ""context"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX7ldRthvKUGuXOP,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,298,"Use the init-statement to declare ""context"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX7ldRthvKUGuXOQ,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,343,"Use the init-statement to declare ""context"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX7ldRthvKUGuXOR,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,352,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX7ldRthvKUGuXOS,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,384,"Use the init-statement to declare ""context"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX7ldRthvKUGuXOU,cpp:S1141,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,519,Extract this nested try block into a separate method.,OPEN,20min,20min,trevor.bakker@uta.edu,"confusing,error-handling",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX7ldRthvKUGuXOV,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,562,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX7ldRthvKUGuXOW,cpp:S2738,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,570,"""catch"" a specific exception type.",OPEN,20min,20min,trevor.bakker@uta.edu,error-handling,2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX9RdRthvKUGuXOt,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LazySymbolExtractor.cpp,Heimdall-SBOM_heimdall,src/common/LazySymbolExtractor.cpp,45,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX9RdRthvKUGuXOu,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LazySymbolExtractor.cpp,Heimdall-SBOM_heimdall,src/common/LazySymbolExtractor.cpp,60,"Use the init-statement to declare ""it"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX9RdRthvKUGuXOv,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LazySymbolExtractor.cpp,Heimdall-SBOM_heimdall,src/common/LazySymbolExtractor.cpp,64,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX9RdRthvKUGuXOw,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LazySymbolExtractor.cpp,Heimdall-SBOM_heimdall,src/common/LazySymbolExtractor.cpp,126,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,pitfall",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX9RdRthvKUGuXOx,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LazySymbolExtractor.cpp,Heimdall-SBOM_heimdall,src/common/LazySymbolExtractor.cpp,160,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX9RdRthvKUGuXOz,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LazySymbolExtractor.cpp,Heimdall-SBOM_heimdall,src/common/LazySymbolExtractor.cpp,164,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX9RdRthvKUGuXOy,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LazySymbolExtractor.cpp,Heimdall-SBOM_heimdall,src/common/LazySymbolExtractor.cpp,166,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX9RdRthvKUGuXO1,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LazySymbolExtractor.cpp,Heimdall-SBOM_heimdall,src/common/LazySymbolExtractor.cpp,172,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX9RdRthvKUGuXO2,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LazySymbolExtractor.cpp,Heimdall-SBOM_heimdall,src/common/LazySymbolExtractor.cpp,178,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX9RdRthvKUGuXO3,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LazySymbolExtractor.cpp,Heimdall-SBOM_heimdall,src/common/LazySymbolExtractor.cpp,178,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYAwdRthvKUGuXR1,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,365,"Use the init-statement to declare ""fileSize"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuYAwdRthvKUGuXR4,cpp:S924,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,390,"Reduce the number of nested ""break"" statements from 3 to 1 authorized.",OPEN,20min,20min,trevor.bakker@uta.edu,"based-on-misra,confusing",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuYAwdRthvKUGuXR2,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,420,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuYAwdRthvKUGuXR5,cpp:S1066,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,429,"Merge this ""if"" statement with the enclosing one.",OPEN,5min,5min,trevor.bakker@uta.edu,clumsy,2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuYAwdRthvKUGuXR3,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,432,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuYAwdRthvKUGuXR7,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,460,Refactor this function to reduce its Cognitive Complexity from 39 to the 25 allowed.,OPEN,19min,19min,trevor.bakker@uta.edu,"architecture,brain-overload",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuYAwdRthvKUGuXR6,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,482,"Use the init-statement to declare ""fileSize"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuYAwdRthvKUGuXR8,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,650,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,pitfall",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuYAwdRthvKUGuXR-,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,651,"Make the type of this parameter a reference-to-const. The current type of ""functions"" is ""class std::vector<class std::basic_string<char> > &"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuYAwdRthvKUGuXR9,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,651,"Remove the unused parameter ""functions"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuYAwdRthvKUGuXR_,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,718,Refactor this function to reduce its Cognitive Complexity from 47 to the 25 allowed.,OPEN,27min,27min,trevor.bakker@uta.edu,"architecture,brain-overload",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX8-dRthvKUGuXOs,cpp:S3624,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.hpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.hpp,64,Customize this class' copy constructor to participate in resource management. Customize or delete its copy assignment operator. Also consider whether move operations should be customized.,OPEN,30min,30min,trevor.bakker@uta.edu,"cert,leak,pitfall",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX44dRthvKUGuXK5,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,43,"Remove this use of the constructor's initializer list for data member ""includeSystemLibraries"". It is redundant with the in-class initializer.",OPEN,10min,10min,trevor.bakker@uta.edu,"cppcoreguidelines,performance",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX44dRthvKUGuXK6,cpp:S5566,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,311,"Replace this range for-loop by ""std::ranges::any_of"".",OPEN,5min,5min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX44dRthvKUGuXK7,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,327,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX44dRthvKUGuXK8,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,340,"Use the init-statement to declare ""match"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX44dRthvKUGuXK9,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,418,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,trevor.bakker@uta.edu,based-on-misra,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX7NdRthvKUGuXOL,cpp:S3656,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.hpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.hpp,42,"Member variables should not be ""protected"".",OPEN,20min,20min,trevor.bakker@uta.edu,"based-on-misra,cppcoreguidelines,pitfall",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX9pdRthvKUGuXPC,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,147,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,pitfall",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX9pdRthvKUGuXPB,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,167,"Use the init-statement to declare ""rusage_data"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX9pdRthvKUGuXO5,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,232,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@uta.edu,"performance,since-c++14",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX9pdRthvKUGuXO6,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,281,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX9pdRthvKUGuXO7,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,362,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX9pdRthvKUGuXO8,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,387,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,pitfall",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX9pdRthvKUGuXO9,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,414,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX9pdRthvKUGuXO-,cpp:S3624,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,432,Customize this class' copy constructor to participate in resource management. Customize or delete its copy assignment operator. Also consider whether move operations should be customized.,OPEN,30min,30min,trevor.bakker@uta.edu,"cert,leak,pitfall",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX9pdRthvKUGuXO4,cpp:S1481,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,452,unused exception parameter 'e',OPEN,5min,5min,trevor.bakker@uta.edu,unused,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX9pdRthvKUGuXO_,cpp:S2486,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,452,Handle this exception or don't catch it at all.,OPEN,1h,1h,trevor.bakker@uta.edu,"cwe,error-handling,suspicious",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX9pdRthvKUGuXPA,cpp:S2486,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,456,Handle this exception or don't catch it at all.,OPEN,1h,1h,trevor.bakker@uta.edu,"cwe,error-handling,suspicious",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX_zdRthvKUGuXRD,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,55,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRE,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,59,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRF,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,67,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,pitfall",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRG,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,67,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRH,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,69,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRI,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,76,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRJ,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,84,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRK,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,91,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRL,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,98,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRP,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,114,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRQ,cpp:S924,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,124,"Reduce the number of nested ""break"" statements from 2 to 1 authorized.",OPEN,20min,20min,trevor.bakker@uta.edu,"based-on-misra,confusing",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRN,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,127,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRM,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,131,"Use the init-statement to declare ""shouldBreak"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRO,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,131,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRR,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,148,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,pitfall",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRS,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,148,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRU,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,190,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRV,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,216,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRW,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,253,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRY,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,354,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRa,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,366,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRb,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,370,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRc,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,441,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRd,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,457,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@uta.edu,"performance,since-c++14",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRA,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,469,"Reduce verbosity with ""using enum"" for ""heimdall::SBOMDifference::Type"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++20,2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRe,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,490,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRf,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,527,"Use ""contains"" member function.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX_zdRthvKUGuXRg,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,539,"Use ""contains"" member function.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX-9dRthvKUGuXQw,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,931,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++17",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX64dRthvKUGuXNk,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,40,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX64dRthvKUGuXNl,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,51,Refactor this function to reduce its Cognitive Complexity from 40 to the 25 allowed.,OPEN,20min,20min,trevor.bakker@uta.edu,"architecture,brain-overload",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX64dRthvKUGuXNs,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,66,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX64dRthvKUGuXNt,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,71,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX64dRthvKUGuXNu,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,76,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX64dRthvKUGuXNv,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,77,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX64dRthvKUGuXNq,cpp:S1141,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,80,Extract this nested try block into a separate method.,OPEN,20min,20min,trevor.bakker@uta.edu,"confusing,error-handling",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX64dRthvKUGuXNr,cpp:S1141,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,110,Extract this nested try block into a separate method.,OPEN,20min,20min,trevor.bakker@uta.edu,"confusing,error-handling",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuX8NdRthvKUGuXOm,cpp:S3624,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.hpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.hpp,51,Customize this struct's destructor to participate in resource management.,OPEN,30min,30min,trevor.bakker@uta.edu,"cert,leak,pitfall",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX8NdRthvKUGuXOn,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.hpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.hpp,115,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX8NdRthvKUGuXOo,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.hpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.hpp,226,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@uta.edu,"performance,since-c++14",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSO,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,110,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSP,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,134,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSQ,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,142,Refactor this function to reduce its Cognitive Complexity from 29 to the 25 allowed.,OPEN,9min,9min,trevor.bakker@uta.edu,"architecture,brain-overload",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSR,cpp:S6003,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,167,"Replace this use of ""push_back"" with ""emplace_back"".",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,performance,since-c++11",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSS,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,343,"Use the init-statement to declare ""remaining_bytes"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXST,cpp:S1066,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,421,"Merge this ""if"" statement with the enclosing one.",OPEN,5min,5min,trevor.bakker@uta.edu,clumsy,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSU,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,453,"Use the init-statement to declare ""md"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSV,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,511,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSW,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,574,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSX,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,574,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSY,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,589,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSZ,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,589,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSa,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,605,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSb,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,605,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSc,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,624,"Use the init-statement to declare ""buffer"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSd,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,681,"Use the init-statement to declare ""libPath"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSe,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,744,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSh,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,748,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSi,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,752,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSj,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,753,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSf,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,778,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSk,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,800,"Use the init-statement to declare ""match"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSl,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,1026,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSm,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,1026,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSn,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,1033,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSo,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,1039,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSp,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,1043,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSq,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,1047,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSr,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,1051,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSs,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,1057,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSt,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,1061,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSu,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,1067,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSv,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,1071,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSw,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,1089,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSx,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,1093,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSy,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,1097,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXSz,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,1101,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXS0,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,1107,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXS1,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,1135,"Use the init-statement to declare ""fullPath"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYBxdRthvKUGuXS2,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,1141,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYFHdRthvKUGuXT1,cpp:S5812,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/compat/compatibility.hpp,Heimdall-SBOM_heimdall,src/compat/compatibility.hpp,72,Concatenate this namespace with the nested ones.,OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,since-c++17",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYFHdRthvKUGuXT0,cpp:S954,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/compat/compatibility.hpp,Heimdall-SBOM_heimdall,src/compat/compatibility.hpp,153,"Move all #include directives to the very top of the file, before any code.",OPEN,10min,10min,trevor.bakker@uta.edu,"confusing,misra-c++2008,misra-c2004,misra-c2012",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYFHdRthvKUGuXT2,cpp:S5812,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/compat/compatibility.hpp,Heimdall-SBOM_heimdall,src/compat/compatibility.hpp,654,Concatenate this namespace with the nested one.,OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,since-c++17",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYC1dRthvKUGuXTG,cpp:S3574,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldAdapter.cpp,Heimdall-SBOM_heimdall,src/gold/GoldAdapter.cpp,96,Remove the redundant return type of this lambda.,OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,since-c++11",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYC1dRthvKUGuXTK,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldAdapter.cpp,Heimdall-SBOM_heimdall,src/gold/GoldAdapter.cpp,309,"Use ""starts_with()"" to check the prefix of the string.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,since-c++20",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYC1dRthvKUGuXTH,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldAdapter.cpp,Heimdall-SBOM_heimdall,src/gold/GoldAdapter.cpp,315,"Use the init-statement to declare ""extension"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYC1dRthvKUGuXTI,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldAdapter.cpp,Heimdall-SBOM_heimdall,src/gold/GoldAdapter.cpp,322,"Use the init-statement to declare ""dashPos"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYC1dRthvKUGuXTL,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldAdapter.cpp,Heimdall-SBOM_heimdall,src/gold/GoldAdapter.cpp,340,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYC1dRthvKUGuXTJ,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldAdapter.cpp,Heimdall-SBOM_heimdall,src/gold/GoldAdapter.cpp,348,"Use the init-statement to declare ""underscorePos"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYCUdRthvKUGuXS3,cpp:S2738,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,150,"""catch"" a specific exception type.",OPEN,20min,20min,trevor.bakker@uta.edu,error-handling,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYCUdRthvKUGuXS4,cpp:S2486,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,150,Handle this exception or don't catch it at all.,OPEN,1h,1h,trevor.bakker@uta.edu,"cwe,error-handling,suspicious",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYCUdRthvKUGuXS5,cpp:S2738,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,163,"""catch"" a specific exception type.",OPEN,20min,20min,trevor.bakker@uta.edu,error-handling,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYCUdRthvKUGuXS6,cpp:S2486,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,163,Handle this exception or don't catch it at all.,OPEN,1h,1h,trevor.bakker@uta.edu,"cwe,error-handling,suspicious",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYCUdRthvKUGuXS7,cpp:S2738,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,176,"""catch"" a specific exception type.",OPEN,20min,20min,trevor.bakker@uta.edu,error-handling,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYCUdRthvKUGuXS8,cpp:S2486,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,176,Handle this exception or don't catch it at all.,OPEN,1h,1h,trevor.bakker@uta.edu,"cwe,error-handling,suspicious",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYCUdRthvKUGuXS-,cpp:S2486,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,189,Handle this exception or don't catch it at all.,OPEN,1h,1h,trevor.bakker@uta.edu,"cwe,error-handling,suspicious",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYCUdRthvKUGuXS9,cpp:S2738,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,189,"""catch"" a specific exception type.",OPEN,20min,20min,trevor.bakker@uta.edu,error-handling,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYCUdRthvKUGuXS_,cpp:S2738,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,225,"""catch"" a specific exception type.",OPEN,20min,20min,trevor.bakker@uta.edu,error-handling,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYCUdRthvKUGuXTA,cpp:S2486,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,225,Handle this exception or don't catch it at all.,OPEN,1h,1h,trevor.bakker@uta.edu,"cwe,error-handling,suspicious",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYCUdRthvKUGuXTB,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,288,"Remove the unused parameter ""handle"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYCUdRthvKUGuXTC,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,288,"Make the type of this parameter a pointer-to-const. The current type of ""handle"" is ""void *"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYCUdRthvKUGuXTE,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,370,"Replace with the version of ""std::ranges::find"" that takes a range.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,clumsy,since-c++20",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYCUdRthvKUGuXTD,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,398,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@uta.edu,brain-overload,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYCUdRthvKUGuXTF,cpp:S6495,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,535,"""std::print"" or ""std::format"" should be used instead of standard output manipulators",OPEN,5min,5min,trevor.bakker@uta.edu,"clumsy,performance,since-c++20",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX3-dRthvKUGuXKj,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDAdapter.cpp,Heimdall-SBOM_heimdall,src/lld/LLDAdapter.cpp,114,"Replace with the version of ""std::ranges::find"" that takes a range.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,clumsy,since-c++20",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX3-dRthvKUGuXKk,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDAdapter.cpp,Heimdall-SBOM_heimdall,src/lld/LLDAdapter.cpp,171,"Replace with the version of ""std::ranges::find"" that takes a range.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,clumsy,since-c++20",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX3-dRthvKUGuXKl,cpp:S3574,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDAdapter.cpp,Heimdall-SBOM_heimdall,src/lld/LLDAdapter.cpp,210,Remove the redundant return type of this lambda.,OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,since-c++11",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX3-dRthvKUGuXKm,cpp:S1481,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDAdapter.cpp,Heimdall-SBOM_heimdall,src/lld/LLDAdapter.cpp,210,"Remove the unused lambda capture ""this"".",OPEN,5min,5min,trevor.bakker@uta.edu,unused,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX3-dRthvKUGuXKn,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDAdapter.cpp,Heimdall-SBOM_heimdall,src/lld/LLDAdapter.cpp,244,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX3-dRthvKUGuXKo,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDAdapter.cpp,Heimdall-SBOM_heimdall,src/lld/LLDAdapter.cpp,406,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,pitfall",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX3-dRthvKUGuXKp,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDAdapter.cpp,Heimdall-SBOM_heimdall,src/lld/LLDAdapter.cpp,406,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX3-dRthvKUGuXKq,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDAdapter.cpp,Heimdall-SBOM_heimdall,src/lld/LLDAdapter.cpp,406,"Remove the unused parameter ""symbolName"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX3-dRthvKUGuXKr,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDAdapter.cpp,Heimdall-SBOM_heimdall,src/lld/LLDAdapter.cpp,406,"Remove the unused parameter ""address"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX3-dRthvKUGuXKs,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDAdapter.cpp,Heimdall-SBOM_heimdall,src/lld/LLDAdapter.cpp,406,"Remove the unused parameter ""size"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX3-dRthvKUGuXKw,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDAdapter.cpp,Heimdall-SBOM_heimdall,src/lld/LLDAdapter.cpp,453,"Use ""starts_with()"" to check the prefix of the string.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,since-c++20",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX3-dRthvKUGuXKt,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDAdapter.cpp,Heimdall-SBOM_heimdall,src/lld/LLDAdapter.cpp,459,"Use the init-statement to declare ""extension"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX3-dRthvKUGuXKu,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDAdapter.cpp,Heimdall-SBOM_heimdall,src/lld/LLDAdapter.cpp,466,"Use the init-statement to declare ""dashPos"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX3-dRthvKUGuXKx,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDAdapter.cpp,Heimdall-SBOM_heimdall,src/lld/LLDAdapter.cpp,484,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX3-dRthvKUGuXKv,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDAdapter.cpp,Heimdall-SBOM_heimdall,src/lld/LLDAdapter.cpp,492,"Use the init-statement to declare ""underscorePos"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX4fdRthvKUGuXKy,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,57,"Make the type of this parameter a pointer-to-const. The current type of this unnamed parameter is ""void *"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX4fdRthvKUGuXKz,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,160,"Replace with the version of ""std::ranges::find"" that takes a range.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,clumsy,since-c++20",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX4fdRthvKUGuXK0,cpp:S6495,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,211,"""std::print"" or ""std::format"" should be used instead of standard output manipulators",OPEN,5min,5min,trevor.bakker@uta.edu,"clumsy,performance,since-c++20",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX4fdRthvKUGuXK1,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,392,"Use the init-statement to declare ""moduleName"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX4fdRthvKUGuXK2,cpp:S5350,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,398,"Make the type of this variable a reference-to-const. The current type of ""F"" is ""class llvm::Function &"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,based-on-misra",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX4fdRthvKUGuXK3,cpp:S5350,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,411,"Make the type of this variable a reference-to-const. The current type of ""GV"" is ""class llvm::GlobalVariable &"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,based-on-misra",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuX4fdRthvKUGuXK4,cpp:S3471,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,426,"Drop the ""virtual"" specifier; it is redundant.",OPEN,5min,5min,trevor.bakker@uta.edu,"api-design,cppcoreguidelines,since-c++11",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYDJdRthvKUGuXTM,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/llvm/llvm_detector.cpp,Heimdall-SBOM_heimdall,src/llvm/llvm_detector.cpp,50,"Reduce verbosity with ""using enum"" for ""heimdall::llvm::LLVMVersion"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++20,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYDJdRthvKUGuXTN,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/llvm/llvm_detector.cpp,Heimdall-SBOM_heimdall,src/llvm/llvm_detector.cpp,66,"Reduce verbosity with ""using enum"" for ""heimdall::llvm::LLVMVersion"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++20,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYDJdRthvKUGuXTO,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/llvm/llvm_detector.cpp,Heimdall-SBOM_heimdall,src/llvm/llvm_detector.cpp,80,"Reduce verbosity with ""using enum"" for ""heimdall::llvm::LLVMVersion"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++20,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYDJdRthvKUGuXTP,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/llvm/llvm_detector.cpp,Heimdall-SBOM_heimdall,src/llvm/llvm_detector.cpp,102,"Reduce verbosity with ""using enum"" for ""heimdall::llvm::LLVMVersion"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++20,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYDJdRthvKUGuXTQ,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/llvm/llvm_detector.cpp,Heimdall-SBOM_heimdall,src/llvm/llvm_detector.cpp,120,"Reduce verbosity with ""using enum"" for ""heimdall::llvm::LLVMVersion"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++20,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYDJdRthvKUGuXTR,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/llvm/llvm_detector.cpp,Heimdall-SBOM_heimdall,src/llvm/llvm_detector.cpp,139,"Reduce verbosity with ""using enum"" for ""heimdall::llvm::LLVMVersion"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++20,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYDrdRthvKUGuXTS,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/PerformanceBenchmark.cpp,Heimdall-SBOM_heimdall,src/tools/PerformanceBenchmark.cpp,39,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,pitfall",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYDrdRthvKUGuXTT,cpp:S1188,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/PerformanceBenchmark.cpp,Heimdall-SBOM_heimdall,src/tools/PerformanceBenchmark.cpp,45,"This lambda has 26 lines, which is greater than the 20 lines authorized. Split it into several lambdas or functions, or make it a named function.",OPEN,20min,20min,trevor.bakker@uta.edu,since-c++11,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYDrdRthvKUGuXTU,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/PerformanceBenchmark.cpp,Heimdall-SBOM_heimdall,src/tools/PerformanceBenchmark.cpp,70,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYDrdRthvKUGuXTV,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/PerformanceBenchmark.cpp,Heimdall-SBOM_heimdall,src/tools/PerformanceBenchmark.cpp,95,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,pitfall",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYDrdRthvKUGuXTW,cpp:S1188,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/PerformanceBenchmark.cpp,Heimdall-SBOM_heimdall,src/tools/PerformanceBenchmark.cpp,101,"This lambda has 23 lines, which is greater than the 20 lines authorized. Split it into several lambdas or functions, or make it a named function.",OPEN,20min,20min,trevor.bakker@uta.edu,since-c++11,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYDrdRthvKUGuXTX,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/PerformanceBenchmark.cpp,Heimdall-SBOM_heimdall,src/tools/PerformanceBenchmark.cpp,122,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYDrdRthvKUGuXTY,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/PerformanceBenchmark.cpp,Heimdall-SBOM_heimdall,src/tools/PerformanceBenchmark.cpp,148,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,pitfall",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYDrdRthvKUGuXTZ,cpp:S1188,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/PerformanceBenchmark.cpp,Heimdall-SBOM_heimdall,src/tools/PerformanceBenchmark.cpp,154,"This lambda has 23 lines, which is greater than the 20 lines authorized. Split it into several lambdas or functions, or make it a named function.",OPEN,20min,20min,trevor.bakker@uta.edu,since-c++11,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYDrdRthvKUGuXTa,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/PerformanceBenchmark.cpp,Heimdall-SBOM_heimdall,src/tools/PerformanceBenchmark.cpp,175,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYDrdRthvKUGuXTb,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/PerformanceBenchmark.cpp,Heimdall-SBOM_heimdall,src/tools/PerformanceBenchmark.cpp,200,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,pitfall",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYDrdRthvKUGuXTc,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/PerformanceBenchmark.cpp,Heimdall-SBOM_heimdall,src/tools/PerformanceBenchmark.cpp,238,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYDrdRthvKUGuXTd,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/PerformanceBenchmark.cpp,Heimdall-SBOM_heimdall,src/tools/PerformanceBenchmark.cpp,261,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,pitfall",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYDrdRthvKUGuXTe,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/PerformanceBenchmark.cpp,Heimdall-SBOM_heimdall,src/tools/PerformanceBenchmark.cpp,291,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYDrdRthvKUGuXTg,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/PerformanceBenchmark.cpp,Heimdall-SBOM_heimdall,src/tools/PerformanceBenchmark.cpp,319,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYDrdRthvKUGuXTh,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/PerformanceBenchmark.cpp,Heimdall-SBOM_heimdall,src/tools/PerformanceBenchmark.cpp,324,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,pitfall",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYDrdRthvKUGuXTj,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/PerformanceBenchmark.cpp,Heimdall-SBOM_heimdall,src/tools/PerformanceBenchmark.cpp,410,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,trevor.bakker@uta.edu,based-on-misra,2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYDrdRthvKUGuXTi,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/PerformanceBenchmark.cpp,Heimdall-SBOM_heimdall,src/tools/PerformanceBenchmark.cpp,456,"Use the init-statement to declare ""file"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-26 03:07:31,2025-07-26 17:27:10,
AZhEuYEBdRthvKUGuXTk,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,88,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuYEBdRthvKUGuXTm,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,101,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuYEBdRthvKUGuXTn,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,105,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuYEBdRthvKUGuXTo,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,119,Refactor this function to reduce its Cognitive Complexity from 36 to the 25 allowed.,OPEN,16min,16min,trevor.bakker@uta.edu,"architecture,brain-overload",2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuYEBdRthvKUGuXTp,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,132,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,trevor.bakker@uta.edu,based-on-misra,2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhEuYEBdRthvKUGuXTq,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,391,"Reduce verbosity with ""using enum"" for ""heimdall::SBOMDifference::Type"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++20,2025-07-26 03:07:31,2025-07-27 13:32:16,
AZhMx7yi3D7gjEUwKco4,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,470,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-26 03:07:01,2025-07-27 16:28:57,
AZhMx7yi3D7gjEUwKco5,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,470,"Remove the unused parameter ""message"", make it unnamed, or declare it ""[[maybe_unused]]"".",OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,unused",2025-07-26 03:07:01,2025-07-27 16:28:57,
AZhEfLQGEH-OrWYOBGzJ,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1001,Define each identifier in a dedicated statement.,OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,convention",2025-07-26 01:07:10,2025-07-26 01:59:16,
AZhEfLS_EH-OrWYOBGz0,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1065,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 01:07:10,2025-07-26 01:59:16,
AZhEfLS_EH-OrWYOBGzy,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1159,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-26 01:07:10,2025-07-26 01:59:16,
AZhEfLS_EH-OrWYOBGz6,cpp:S1854,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,2066,Value stored to 'firstProperty' is never read,OPEN,1min,1min,trevor.bakker@uta.edu,"cert,cwe,symbolic-execution,unused",2025-07-26 01:07:10,2025-07-26 01:59:16,
AZhC5uBuS6iy3hzZmpdv,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,296,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-25 18:44:16,2025-07-25 18:44:16,
AZhC5uBuS6iy3hzZmpdw,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,354,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-25 18:44:16,2025-07-25 18:44:16,
AZhCU58WrqaivbtT-_Ps,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,143,"Replace the redundant type with ""auto"".",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,cppcoreguidelines,since-c++11",2025-07-25 16:03:15,2025-07-25 16:03:15,
AZhB98gyk8Wx62r9G-tL,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,213,"This function should be declared ""const"".",OPEN,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-25 14:22:29,2025-07-25 14:22:29,
AZhB98mmk8Wx62r9G-tP,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,366,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@uta.edu,"clumsy,since-c++20",2025-07-25 14:22:29,2025-07-25 14:22:29,
AZhBn_7x4a3Lp2zpHZwN,cpp:S5812,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,48,Concatenate this namespace with the nested one.,OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,since-c++17",2025-07-25 12:43:36,2025-07-25 12:43:36,
AZhBn_4u4a3Lp2zpHZwL,cpp:S5812,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.hpp,Heimdall-SBOM_heimdall,src/common/Utils.hpp,36,Concatenate this namespace with the nested one.,OPEN,5min,5min,trevor.bakker@uta.edu,"confusing,since-c++17",2025-07-25 12:43:36,2025-07-25 12:43:36,
AZg8ImrXcq9bBT9oyCXO,cpp:S3630,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,511,"Replace ""reinterpret_cast"" with a safer operation.",OPEN,20min,20min,trevor.bakker@protonmail.com,"cppcoreguidelines,pitfall",2025-07-24 11:05:43,2025-07-24 11:05:43,
AZg8ImrXcq9bBT9oyCXF,cpp:S1481,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,522,unused variable 'version',OPEN,5min,5min,trevor.bakker@protonmail.com,unused,2025-07-24 11:05:43,2025-07-24 11:05:43,
AZg8ImrXcq9bBT9oyCXP,cpp:S3630,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,522,"Replace ""reinterpret_cast"" with a safer operation.",OPEN,20min,20min,trevor.bakker@protonmail.com,"cppcoreguidelines,pitfall",2025-07-24 11:05:43,2025-07-24 11:05:43,
AZg8ImrXcq9bBT9oyCXW,cpp:S1854,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,522,Value stored to 'version' during its initialization is never read,OPEN,1min,1min,trevor.bakker@protonmail.com,"cert,cwe,symbolic-execution,unused",2025-07-24 11:05:43,2025-07-24 11:05:43,
AZg8ImrXcq9bBT9oyCXQ,cpp:S3630,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,526,"Replace ""reinterpret_cast"" with a safer operation.",OPEN,20min,20min,trevor.bakker@protonmail.com,"cppcoreguidelines,pitfall",2025-07-24 11:05:43,2025-07-24 11:05:43,
AZg8ImrXcq9bBT9oyCXG,cpp:S1481,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,536,unused variable 'minInstLength',OPEN,5min,5min,trevor.bakker@protonmail.com,unused,2025-07-24 11:05:43,2025-07-24 11:05:43,
AZg8ImrXcq9bBT9oyCXX,cpp:S1854,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,536,Value stored to 'minInstLength' during its initialization is never read,OPEN,1min,1min,trevor.bakker@protonmail.com,"cert,cwe,symbolic-execution,unused",2025-07-24 11:05:43,2025-07-24 11:05:43,
AZg8ImrXcq9bBT9oyCXH,cpp:S1481,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,544,unused variable 'lineBase',OPEN,5min,5min,trevor.bakker@protonmail.com,unused,2025-07-24 11:05:43,2025-07-24 11:05:43,
AZg8ImrXcq9bBT9oyCXN,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,544,"Replace the redundant type with ""auto"".",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-24 11:05:43,2025-07-24 11:05:43,
AZg8ImrXcq9bBT9oyCXY,cpp:S1854,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,544,Value stored to 'lineBase' during its initialization is never read,OPEN,1min,1min,trevor.bakker@protonmail.com,"cert,cwe,symbolic-execution,unused",2025-07-24 11:05:43,2025-07-24 11:05:43,
AZg8ImrXcq9bBT9oyCXZ,cpp:S1854,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,635,Value stored to 'offset' is never read,OPEN,1min,1min,trevor.bakker@protonmail.com,"cert,cwe,symbolic-execution,unused",2025-07-24 11:05:43,2025-07-24 11:05:43,
AZg8Impjcq9bBT9oyCXC,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.hpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.hpp,273,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@protonmail.com,"performance,since-c++14",2025-07-24 11:05:43,2025-07-24 11:05:43,
AZg8Impjcq9bBT9oyCXD,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.hpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.hpp,274,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@protonmail.com,"performance,since-c++14",2025-07-24 11:05:43,2025-07-24 11:05:43,
AZg8Impjcq9bBT9oyCXE,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.hpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.hpp,275,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@protonmail.com,"performance,since-c++14",2025-07-24 11:05:43,2025-07-24 11:05:43,
AZg4JVgMlUrtQspUbGXV,cpp:S5350,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,390,"Make the type of this variable a pointer-to-const. The current type of ""entry"" is ""struct dirent *"".",OPEN,2min,2min,trevor.bakker@protonmail.com,"bad-practice,based-on-misra",2025-07-23 16:36:35,2025-07-23 16:36:35,
AZg4JVgMlUrtQspUbGXT,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,391,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@protonmail.com,brain-overload,2025-07-23 16:36:35,2025-07-23 16:36:35,
AZg4JVgMlUrtQspUbGXX,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,394,"Use ""ends_with()"" to check the postfix of the string.",OPEN,2min,2min,trevor.bakker@protonmail.com,"bad-practice,since-c++20",2025-07-23 16:36:35,2025-07-23 16:36:35,
AZg4JVgMlUrtQspUbGXY,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,395,"Use ""ends_with()"" to check the postfix of the string.",OPEN,2min,2min,trevor.bakker@protonmail.com,"bad-practice,since-c++20",2025-07-23 16:36:35,2025-07-23 16:36:35,
AZg4Hn2KQ-1qWsstey1A,cpp:S1871,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,389,The code of this branch is a duplicate; merge the branches or refactor so that all branches are unique.,OPEN,10min,10min,trevor.bakker@protonmail.com,"design,suspicious",2025-07-23 16:28:46,2025-07-23 16:28:46,
AZgqy0ZwqwutLH9iFL9P,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,50,Global variables should be const.,OPEN,20min,20min,trevor.bakker@protonmail.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-21 02:19:56,2025-07-21 02:19:56,
AZgqy0ZwqwutLH9iFL9Q,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,51,Global variables should be const.,OPEN,20min,20min,trevor.bakker@protonmail.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-21 02:19:56,2025-07-21 02:19:56,
AZgqy0ZwqwutLH9iFL9b,cpp:S6229,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,609,"Replace this use of ""time"" with equivalent code using ""std::chrono"".",OPEN,10min,10min,trevor.bakker@protonmail.com,"confusing,since-c++20",2025-07-21 02:19:56,2025-07-21 02:19:56,
AZgqy0YSqwutLH9iFL87,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,130,Global variables should be const.,OPEN,20min,20min,trevor.bakker@protonmail.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-21 02:19:56,2025-07-21 02:19:56,
AZgqy0YSqwutLH9iFL88,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,131,Global variables should be const.,OPEN,20min,20min,trevor.bakker@protonmail.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-21 02:19:56,2025-07-21 02:19:56,
AZgqy0YSqwutLH9iFL8-,cpp:S6003,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,341,"Replace this use of ""push_back"" with ""emplace_back"".",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,performance,since-c++11",2025-07-21 02:19:56,2025-07-23 16:32:06,
AZgqy0YSqwutLH9iFL8_,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1048,Refactor this function to reduce its Cognitive Complexity from 83 to the 25 allowed.,OPEN,1h3min,1h3min,trevor.bakker@protonmail.com,"architecture,brain-overload",2025-07-21 02:19:56,2025-07-21 02:19:56,
AZgqy0YSqwutLH9iFL9H,cpp:S6229,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1112,"Replace this use of ""time"" with equivalent code using ""std::chrono"".",OPEN,10min,10min,trevor.bakker@protonmail.com,"confusing,since-c++20",2025-07-21 02:19:56,2025-07-21 02:19:56,
AZgqy0YSqwutLH9iFL9L,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3375,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,trevor.bakker@protonmail.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-21 02:19:56,2025-07-21 02:19:56,
AZgqy0YSqwutLH9iFL9M,cpp:S6229,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3376,"Replace this use of ""time"" with equivalent code using ""std::chrono"".",OPEN,10min,10min,trevor.bakker@protonmail.com,"confusing,since-c++20",2025-07-21 02:19:56,2025-07-21 02:19:56,
AZgqy0YSqwutLH9iFL9O,cpp:S1911,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3397,"Remove use of this obsolete ""usleep"" function. Replace it by a call to ""nanosleep"" or ""setitimer"".",OPEN,30min,30min,trevor.bakker@protonmail.com,"cert,obsolete",2025-07-21 02:19:56,2025-07-21 02:19:56,
AZgk-JeihTOwlKW6cbTx,cpp:S1854,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,446,Value stored to 'packageManagerDetected' is never read,OPEN,1min,1min,trevor.bakker@protonmail.com,"cert,cwe,symbolic-execution,unused",2025-07-19 23:12:49,2025-07-19 23:12:49,
AZgk-JlGhTOwlKW6cbT8,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,69,"Do not assign data members in a constructor. Initialize member ""securityFlags"" in an initialization list.",OPEN,10min,10min,trevor.bakker@protonmail.com,"cppcoreguidelines,performance",2025-07-19 23:11:49,2025-07-27 03:00:55,
AZgk-JlHhTOwlKW6cbUC,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,81,Refactor this function to reduce its Cognitive Complexity from 124 to the 25 allowed.,OPEN,1h44min,1h44min,trevor.bakker@protonmail.com,"architecture,brain-overload",2025-07-19 23:11:49,2025-07-22 00:52:27,
AZgk-JlHhTOwlKW6cbUL,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,99,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@protonmail.com,"performance,since-c++14",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JlHhTOwlKW6cbUM,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,100,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@protonmail.com,"performance,since-c++14",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JlGhTOwlKW6cbT0,cpp:S1117,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,145,declaration shadows a field of 'heimdall::AdaExtractor',OPEN,5min,5min,trevor.bakker@protonmail.com,"based-on-misra,cert,pitfall,suspicious",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JlHhTOwlKW6cbUN,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,153,Define each identifier in a dedicated statement.,OPEN,5min,5min,trevor.bakker@protonmail.com,"based-on-misra,cert,convention",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JlHhTOwlKW6cbUO,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,153,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@protonmail.com,"performance,since-c++14",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JlHhTOwlKW6cbUP,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,200,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@protonmail.com,"performance,since-c++14",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JlHhTOwlKW6cbUF,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,210,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,trevor.bakker@protonmail.com,brain-overload,2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JlHhTOwlKW6cbUQ,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,210,"Use ""starts_with()"" to check the prefix of the string.",OPEN,2min,2min,trevor.bakker@protonmail.com,"bad-practice,since-c++20",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JlHhTOwlKW6cbUR,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,210,"Use ""starts_with()"" to check the prefix of the string.",OPEN,2min,2min,trevor.bakker@protonmail.com,"bad-practice,since-c++20",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JlGhTOwlKW6cbT1,cpp:S1117,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,214,declaration shadows a local variable,OPEN,5min,5min,trevor.bakker@protonmail.com,"based-on-misra,cert,pitfall,suspicious",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JlHhTOwlKW6cbUS,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,214,Define each identifier in a dedicated statement.,OPEN,5min,5min,trevor.bakker@protonmail.com,"based-on-misra,cert,convention",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JlHhTOwlKW6cbUf,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,374,"Use ""starts_with()"" to check the prefix of the string.",OPEN,2min,2min,trevor.bakker@protonmail.com,"bad-practice,since-c++20",2025-07-19 23:11:49,2025-07-27 03:00:55,
AZgk-JlHhTOwlKW6cbUd,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,424,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@protonmail.com,"clumsy,since-c++23",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JlHhTOwlKW6cbUs,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,800,Define each identifier in a dedicated statement.,OPEN,5min,5min,trevor.bakker@protonmail.com,"based-on-misra,cert,convention",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JlHhTOwlKW6cbUu,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,828,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++17,2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JlHhTOwlKW6cbVA,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,1001,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@protonmail.com,"performance,since-c++14",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JlHhTOwlKW6cbVF,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,1035,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++17,2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JlHhTOwlKW6cbVG,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,1065,Define each identifier in a dedicated statement.,OPEN,5min,5min,trevor.bakker@protonmail.com,"based-on-misra,cert,convention",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JlHhTOwlKW6cbVH,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,1075,Define each identifier in a dedicated statement.,OPEN,5min,5min,trevor.bakker@protonmail.com,"based-on-misra,cert,convention",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JlHhTOwlKW6cbVL,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,1115,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++17,2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JlHhTOwlKW6cbVM,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,1116,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@protonmail.com,"performance,since-c++14",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JlHhTOwlKW6cbVO,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,1121,Define each identifier in a dedicated statement.,OPEN,5min,5min,trevor.bakker@protonmail.com,"based-on-misra,cert,convention",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JlHhTOwlKW6cbVP,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,1135,"Use ""contains"" member function.",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,since-c++20",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JlHhTOwlKW6cbVQ,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,1140,"Use ""contains"" member function.",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,since-c++20",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JlHhTOwlKW6cbVb,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,1217,"Use ""starts_with()"" to check the prefix of the string.",OPEN,2min,2min,trevor.bakker@protonmail.com,"bad-practice,since-c++20",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JlHhTOwlKW6cbVc,cpp:S6178,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.cpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.cpp,1217,"Use ""starts_with()"" to check the prefix of the string.",OPEN,2min,2min,trevor.bakker@protonmail.com,"bad-practice,since-c++20",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JnEhTOwlKW6cbVl,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.hpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.hpp,82,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@protonmail.com,"performance,since-c++14",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JnEhTOwlKW6cbVm,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.hpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.hpp,83,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@protonmail.com,"performance,since-c++14",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JnEhTOwlKW6cbVo,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.hpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.hpp,211,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@protonmail.com,"performance,since-c++14",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JnEhTOwlKW6cbVq,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.hpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.hpp,356,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@protonmail.com,"performance,since-c++14",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JnEhTOwlKW6cbVr,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.hpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.hpp,362,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@protonmail.com,"performance,since-c++14",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgk-JnEhTOwlKW6cbVs,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/AdaExtractor.hpp,Heimdall-SBOM_heimdall,src/common/AdaExtractor.hpp,363,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,trevor.bakker@protonmail.com,"performance,since-c++14",2025-07-19 23:11:49,2025-07-19 23:12:49,
AZgjR0MNr3syAAUJIkBa,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,1039,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@protonmail.com,"clumsy,since-c++20",2025-07-19 15:18:25,2025-07-19 15:18:25,
AZgjR0MNr3syAAUJIkBe,cpp:S6003,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,1095,"Replace this use of ""push_back"" with ""emplace_back"".",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,performance,since-c++11",2025-07-19 15:18:25,2025-07-19 15:18:25,
AZgjR0I3r3syAAUJIkBO,cpp:S1481,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1278,unused variable 'total',OPEN,5min,5min,trevor.bakker@protonmail.com,unused,2025-07-19 15:18:25,2025-07-19 15:18:25,
AZgjR0I3r3syAAUJIkBW,cpp:S1854,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1278,Value stored to 'total' during its initialization is never read,OPEN,1min,1min,trevor.bakker@protonmail.com,"cert,cwe,symbolic-execution,unused",2025-07-19 15:18:25,2025-07-19 15:18:25,
AZgjR0I3r3syAAUJIkBR,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1427,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,trevor.bakker@protonmail.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-19 15:18:25,2025-07-19 15:18:25,
AZgjR0I3r3syAAUJIkBS,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1441,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,trevor.bakker@protonmail.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-19 15:18:25,2025-07-19 15:18:25,
AZgjR0Mkr3syAAUJIkBh,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LazySymbolExtractor.cpp,Heimdall-SBOM_heimdall,src/common/LazySymbolExtractor.cpp,43,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,cppcoreguidelines,since-c++17",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0Mkr3syAAUJIkBk,cpp:S6012,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LazySymbolExtractor.cpp,Heimdall-SBOM_heimdall,src/common/LazySymbolExtractor.cpp,52,Avoid explicitly specifying the template arguments by relying on the class template argument deduction.,OPEN,5min,5min,trevor.bakker@protonmail.com,"clumsy,since-c++17",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0Mkr3syAAUJIkBl,cpp:S5997,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LazySymbolExtractor.cpp,Heimdall-SBOM_heimdall,src/common/LazySymbolExtractor.cpp,52,"Replace this use of ""std::lock_guard"" with ""std::scoped_lock""",OPEN,5min,5min,trevor.bakker@protonmail.com,"brain-overload,clumsy,since-c++17",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0Mkr3syAAUJIkBn,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LazySymbolExtractor.cpp,Heimdall-SBOM_heimdall,src/common/LazySymbolExtractor.cpp,93,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@protonmail.com,"clumsy,since-c++20",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0Mkr3syAAUJIkBo,cpp:S6012,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LazySymbolExtractor.cpp,Heimdall-SBOM_heimdall,src/common/LazySymbolExtractor.cpp,103,Avoid explicitly specifying the template arguments by relying on the class template argument deduction.,OPEN,5min,5min,trevor.bakker@protonmail.com,"clumsy,since-c++17",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0Mkr3syAAUJIkBp,cpp:S5997,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LazySymbolExtractor.cpp,Heimdall-SBOM_heimdall,src/common/LazySymbolExtractor.cpp,103,"Replace this use of ""std::lock_guard"" with ""std::scoped_lock""",OPEN,5min,5min,trevor.bakker@protonmail.com,"brain-overload,clumsy,since-c++17",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0Mkr3syAAUJIkBq,cpp:S6012,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LazySymbolExtractor.cpp,Heimdall-SBOM_heimdall,src/common/LazySymbolExtractor.cpp,116,Avoid explicitly specifying the template arguments by relying on the class template argument deduction.,OPEN,5min,5min,trevor.bakker@protonmail.com,"clumsy,since-c++17",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0Mkr3syAAUJIkBr,cpp:S5997,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LazySymbolExtractor.cpp,Heimdall-SBOM_heimdall,src/common/LazySymbolExtractor.cpp,116,"Replace this use of ""std::lock_guard"" with ""std::scoped_lock""",OPEN,5min,5min,trevor.bakker@protonmail.com,"brain-overload,clumsy,since-c++17",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0Mkr3syAAUJIkBs,cpp:S6012,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LazySymbolExtractor.cpp,Heimdall-SBOM_heimdall,src/common/LazySymbolExtractor.cpp,122,Avoid explicitly specifying the template arguments by relying on the class template argument deduction.,OPEN,5min,5min,trevor.bakker@protonmail.com,"clumsy,since-c++17",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0Mkr3syAAUJIkBt,cpp:S5997,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LazySymbolExtractor.cpp,Heimdall-SBOM_heimdall,src/common/LazySymbolExtractor.cpp,122,"Replace this use of ""std::lock_guard"" with ""std::scoped_lock""",OPEN,5min,5min,trevor.bakker@protonmail.com,"brain-overload,clumsy,since-c++17",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0Mkr3syAAUJIkBv,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LazySymbolExtractor.cpp,Heimdall-SBOM_heimdall,src/common/LazySymbolExtractor.cpp,153,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,trevor.bakker@protonmail.com,"clumsy,since-c++20",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0Mkr3syAAUJIkBz,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LazySymbolExtractor.cpp,Heimdall-SBOM_heimdall,src/common/LazySymbolExtractor.cpp,163,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@protonmail.com,"clumsy,since-c++23",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0OWr3syAAUJIkC8,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LazySymbolExtractor.hpp,Heimdall-SBOM_heimdall,src/common/LazySymbolExtractor.hpp,104,"Use the transparent equality ""std::equal_to<>"" and a custom transparent heterogeneous hasher with this associative string container.",OPEN,2min,2min,trevor.bakker@protonmail.com,"performance,since-c++14",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0OOr3syAAUJIkCE,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,259,Define each identifier in a dedicated statement.,OPEN,5min,5min,trevor.bakker@protonmail.com,"based-on-misra,cert,convention",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0OOr3syAAUJIkCF,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,281,Define each identifier in a dedicated statement.,OPEN,5min,5min,trevor.bakker@protonmail.com,"based-on-misra,cert,convention",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0OOr3syAAUJIkCG,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,337,Define each identifier in a dedicated statement.,OPEN,5min,5min,trevor.bakker@protonmail.com,"based-on-misra,cert,convention",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0OOr3syAAUJIkCH,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,341,Refactor this function to reduce its Cognitive Complexity from 31 to the 25 allowed.,OPEN,11min,11min,trevor.bakker@protonmail.com,"architecture,brain-overload",2025-07-19 15:07:38,2025-07-24 11:05:43,
AZgjR0OOr3syAAUJIkCK,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,350,Define each identifier in a dedicated statement.,OPEN,5min,5min,trevor.bakker@protonmail.com,"based-on-misra,cert,convention",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0OOr3syAAUJIkCU,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,467,Define each identifier in a dedicated statement.,OPEN,5min,5min,trevor.bakker@protonmail.com,"based-on-misra,cert,convention",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0OOr3syAAUJIkC4,cpp:S1854,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,540,Value stored to 'defaultIsStmt' during its initialization is never read,OPEN,1min,1min,trevor.bakker@protonmail.com,"cert,cwe,symbolic-execution,unused",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0OOr3syAAUJIkCB,cpp:S1481,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,540,unused variable 'defaultIsStmt',OPEN,5min,5min,trevor.bakker@protonmail.com,unused,2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0OOr3syAAUJIkC6,cpp:S1854,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,548,Value stored to 'lineRange' during its initialization is never read,OPEN,1min,1min,trevor.bakker@protonmail.com,"cert,cwe,symbolic-execution,unused",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0OOr3syAAUJIkCD,cpp:S1481,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,548,unused variable 'lineRange',OPEN,5min,5min,trevor.bakker@protonmail.com,unused,2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0OOr3syAAUJIkCc,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,669,"Use ""std::byte"" for byte-oriented memory access.",OPEN,5min,5min,trevor.bakker@protonmail.com,"clumsy,pitfall,since-c++17",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0OOr3syAAUJIkCd,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,688,"Use ""std::byte"" for byte-oriented memory access.",OPEN,5min,5min,trevor.bakker@protonmail.com,"clumsy,pitfall,since-c++17",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0OOr3syAAUJIkCi,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,848,"This function should be declared ""const"".",OPEN,5min,5min,trevor.bakker@protonmail.com,"confusing,pitfall",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0OOr3syAAUJIkCj,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,875,"Use ""std::byte"" for byte-oriented memory access.",OPEN,5min,5min,trevor.bakker@protonmail.com,"clumsy,pitfall,since-c++17",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0OOr3syAAUJIkCk,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,904,"Use ""std::byte"" for byte-oriented memory access.",OPEN,5min,5min,trevor.bakker@protonmail.com,"clumsy,pitfall,since-c++17",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0OOr3syAAUJIkCl,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,938,"Use ""std::byte"" for byte-oriented memory access.",OPEN,5min,5min,trevor.bakker@protonmail.com,"clumsy,pitfall,since-c++17",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0OOr3syAAUJIkCo,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,1020,"Replace the redundant type with ""auto"".",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0OOr3syAAUJIkCp,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,1024,"Use ""std::byte"" for byte-oriented data manipulation.",OPEN,5min,5min,trevor.bakker@protonmail.com,"clumsy,pitfall,since-c++17",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0OOr3syAAUJIkCt,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,1076,"Replace the redundant type with ""auto"".",OPEN,2min,2min,trevor.bakker@protonmail.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0OOr3syAAUJIkCu,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.cpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.cpp,1080,"Use ""std::byte"" for byte-oriented data manipulation.",OPEN,5min,5min,trevor.bakker@protonmail.com,"clumsy,pitfall,since-c++17",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZgjR0Mdr3syAAUJIkBg,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/LightweightDWARFParser.hpp,Heimdall-SBOM_heimdall,src/common/LightweightDWARFParser.hpp,225,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,trevor.bakker@protonmail.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-19 15:07:38,2025-07-19 15:18:25,
AZggH2_ItDDpQVXprkwh,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,819,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++11,2025-07-19 00:34:49,2025-07-19 00:34:49,
AZggH2_ItDDpQVXprkwi,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,844,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++11,2025-07-19 00:34:49,2025-07-19 00:34:49,
AZggH2_ItDDpQVXprkwl,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,938,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++11,2025-07-19 00:34:49,2025-07-19 00:34:49,
AZggH2_ItDDpQVXprkwn,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,963,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@protonmail.com,since-c++11,2025-07-19 00:34:49,2025-07-19 00:34:49,
AZggH3B4tDDpQVXprkwt,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,410,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,trevor.bakker@protonmail.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-19 00:34:49,2025-07-19 00:34:49,
AZggH3B4tDDpQVXprkwu,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,428,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,trevor.bakker@protonmail.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-19 00:34:49,2025-07-19 00:34:49,
AZggH3B4tDDpQVXprkwv,cpp:S6495,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,440,"""std::print"" or ""std::format"" should be used instead of standard output manipulators",OPEN,5min,5min,trevor.bakker@protonmail.com,"clumsy,performance,since-c++20",2025-07-19 00:34:49,2025-07-19 00:34:49,
AZggH3B4tDDpQVXprkwy,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,465,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,trevor.bakker@protonmail.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-19 00:34:49,2025-07-19 00:34:49,
AZggH3B4tDDpQVXprkwz,cpp:S6495,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,477,"""std::print"" or ""std::format"" should be used instead of standard output manipulators",OPEN,5min,5min,trevor.bakker@protonmail.com,"clumsy,performance,since-c++20",2025-07-19 00:34:49,2025-07-19 00:34:49,
AZgI2T0b2eHRjAPhUVn2,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,454,Remove the commented out code.,OPEN,5min,5min,trevor.bakker@protonmail.com,"based-on-misra,unused",2025-07-14 12:11:19,2025-07-14 12:11:19,
AZgEDf0GWWROGYDt1QCk,python:S1192,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tools/demo_visualization.py,Heimdall-SBOM_heimdall,tools/demo_visualization.py,86,"Define a constant instead of duplicating this literal ""demo_results.json"" 4 times.",OPEN,8min,8min,tbakker@example.com,design,2025-07-13 13:18:29,2025-07-13 13:50:37,
AZgEDf0GWWROGYDt1QCm,python:S3457,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tools/demo_visualization.py,Heimdall-SBOM_heimdall,tools/demo_visualization.py,99,Add replacement fields or use a normal string instead of an f-string.,OPEN,1min,1min,tbakker@example.com,confusing,2025-07-13 13:18:29,2025-07-13 13:50:37,
AZgEDf0GWWROGYDt1QCl,python:S1481,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tools/demo_visualization.py,Heimdall-SBOM_heimdall,tools/demo_visualization.py,118,"Remove the unused local variable ""summary_output"".",OPEN,5min,5min,tbakker@example.com,unused,2025-07-13 13:18:29,2025-07-13 13:50:37,
AZgEDfz_WWROGYDt1QCf,python:S1192,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tools/profiling_visualizer.py,Heimdall-SBOM_heimdall,tools/profiling_visualizer.py,110,Define a constant instead of duplicating this literal 'Session Name' 3 times.,OPEN,6min,6min,tbakker@example.com,design,2025-07-13 13:18:29,2025-07-13 13:50:37,
AZgEDfz_WWROGYDt1QCh,python:S1481,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tools/profiling_visualizer.py,Heimdall-SBOM_heimdall,tools/profiling_visualizer.py,300,"Replace the unused local variable ""fig"" with ""_"".",OPEN,5min,5min,tbakker@example.com,unused,2025-07-13 13:18:29,2025-07-13 13:50:37,
AZgEDfz_WWROGYDt1QCi,python:S1481,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tools/profiling_visualizer.py,Heimdall-SBOM_heimdall,tools/profiling_visualizer.py,304,"Remove the unused local variable ""bars1"".",OPEN,5min,5min,tbakker@example.com,unused,2025-07-13 13:18:29,2025-07-13 13:50:37,
AZgEDfz_WWROGYDt1QCj,python:S1481,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tools/profiling_visualizer.py,Heimdall-SBOM_heimdall,tools/profiling_visualizer.py,316,"Remove the unused local variable ""bars2"".",OPEN,5min,5min,tbakker@example.com,unused,2025-07-13 13:18:29,2025-07-13 13:50:37,
AZgEDfz_WWROGYDt1QCg,python:S1481,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tools/profiling_visualizer.py,Heimdall-SBOM_heimdall,tools/profiling_visualizer.py,330,"Remove the unused local variable ""bars3"".",OPEN,5min,5min,tbakker@example.com,unused,2025-07-13 13:18:29,2025-07-13 13:50:37,
AZgEDfxTWWROGYDt1QBo,cpp:S3806,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.cpp,Heimdall-SBOM_heimdall,src/common/Profiler.cpp,12,non-portable path to file '<Psapi.h>'; specified path differs in case from file name on disk,OPEN,5min,5min,tbakker@example.com,pitfall,2025-07-13 13:13:28,2025-07-13 13:50:37,
AZgEDfxTWWROGYDt1QBp,cpp:S954,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.cpp,Heimdall-SBOM_heimdall,src/common/Profiler.cpp,12,Move this #include directive to the top of the file.,OPEN,10min,10min,tbakker@example.com,"confusing,misra-c++2008,misra-c2004,misra-c2012",2025-07-13 13:13:28,2025-07-13 13:50:37,
AZgEDfxTWWROGYDt1QBt,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.cpp,Heimdall-SBOM_heimdall,src/common/Profiler.cpp,331,Define each identifier in a dedicated statement.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,convention",2025-07-13 13:13:28,2025-07-13 13:50:37,
AZgEDfxTWWROGYDt1QBw,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.cpp,Heimdall-SBOM_heimdall,src/common/Profiler.cpp,355,Define each identifier in a dedicated statement.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,convention",2025-07-13 13:13:28,2025-07-13 13:50:37,
AZgEDfxTWWROGYDt1QBx,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.cpp,Heimdall-SBOM_heimdall,src/common/Profiler.cpp,358,Define each identifier in a dedicated statement.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,convention",2025-07-13 13:13:28,2025-07-13 13:50:37,
AZgEDfxTWWROGYDt1QBy,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.cpp,Heimdall-SBOM_heimdall,src/common/Profiler.cpp,366,Define each identifier in a dedicated statement.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,convention",2025-07-13 13:13:28,2025-07-13 13:50:37,
AZgEDfxuWWROGYDt1QB1,cpp:S3806,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,22,non-portable path to file '<Windows.h>'; specified path differs in case from file name on disk,OPEN,5min,5min,tbakker@example.com,pitfall,2025-07-13 13:13:28,2025-07-13 13:50:37,
AZgEDfxuWWROGYDt1QB2,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,42,"Do not use the constructor's initializer list for data member ""is_running_"". Use the in-class initializer instead.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-13 13:13:28,2025-07-13 13:50:37,
AZgEDfxuWWROGYDt1QB3,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,97,"Do not use the constructor's initializer list for data member ""peak_memory_"". Use the in-class initializer instead.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-13 13:13:28,2025-07-26 14:40:18,
AZgEDfxuWWROGYDt1QB4,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,97,"Do not use the constructor's initializer list for data member ""current_memory_"". Use the in-class initializer instead.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-13 13:13:28,2025-07-26 14:40:18,
AZgEDfxuWWROGYDt1QB5,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,152,Define each identifier in a dedicated statement.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,convention",2025-07-13 13:13:28,2025-07-13 13:50:37,
AZgEDfxuWWROGYDt1QB6,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,199,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-13 13:13:28,2025-07-13 13:50:37,
AZgEDfxuWWROGYDt1QB9,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,251,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-13 13:13:28,2025-07-13 13:50:37,
AZgEDfxuWWROGYDt1QB8,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,258,"Do not use the constructor's initializer list for data member ""enabled_"". Use the in-class initializer instead.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-13 13:13:28,2025-07-13 13:50:37,
AZgEDfxuWWROGYDt1QB-,cpp:S6012,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,263,Avoid explicitly specifying the template arguments by relying on the class template argument deduction.,OPEN,5min,5min,tbakker@example.com,"clumsy,since-c++17",2025-07-13 13:13:28,2025-07-13 13:50:37,
AZgEDfxuWWROGYDt1QB_,cpp:S5997,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,263,"Replace this use of ""std::lock_guard"" with ""std::scoped_lock""",OPEN,5min,5min,tbakker@example.com,"brain-overload,clumsy,since-c++17",2025-07-13 13:13:28,2025-07-13 13:50:37,
AZgEDfxuWWROGYDt1QCA,cpp:S5025,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,266,"Replace the use of ""new"" with an operation that automatically manages the memory.",OPEN,10min,10min,tbakker@example.com,"bad-practice,cppcoreguidelines,since-c++11",2025-07-13 13:13:28,2025-07-13 13:50:37,
AZgEDfxuWWROGYDt1QCC,cpp:S6012,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,293,Avoid explicitly specifying the template arguments by relying on the class template argument deduction.,OPEN,5min,5min,tbakker@example.com,"clumsy,since-c++17",2025-07-13 13:13:28,2025-07-13 13:50:37,
AZgEDfxuWWROGYDt1QCD,cpp:S5997,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,293,"Replace this use of ""std::lock_guard"" with ""std::scoped_lock""",OPEN,5min,5min,tbakker@example.com,"brain-overload,clumsy,since-c++17",2025-07-13 13:13:28,2025-07-13 13:50:37,
AZgEDfxuWWROGYDt1QCE,cpp:S6012,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,306,Avoid explicitly specifying the template arguments by relying on the class template argument deduction.,OPEN,5min,5min,tbakker@example.com,"clumsy,since-c++17",2025-07-13 13:13:28,2025-07-13 13:50:37,
AZgEDfxuWWROGYDt1QCF,cpp:S5997,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,306,"Replace this use of ""std::lock_guard"" with ""std::scoped_lock""",OPEN,5min,5min,tbakker@example.com,"brain-overload,clumsy,since-c++17",2025-07-13 13:13:28,2025-07-13 13:50:37,
AZgEDfxuWWROGYDt1QCG,cpp:S6012,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,318,Avoid explicitly specifying the template arguments by relying on the class template argument deduction.,OPEN,5min,5min,tbakker@example.com,"clumsy,since-c++17",2025-07-13 13:13:28,2025-07-13 13:50:37,
AZgEDfxuWWROGYDt1QCH,cpp:S5997,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,318,"Replace this use of ""std::lock_guard"" with ""std::scoped_lock""",OPEN,5min,5min,tbakker@example.com,"brain-overload,clumsy,since-c++17",2025-07-13 13:13:28,2025-07-13 13:50:37,
AZgEDfxuWWROGYDt1QCI,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,352,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-13 13:13:28,2025-07-13 13:50:37,
AZgEDfxuWWROGYDt1QB0,cpp:S6190,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Profiler.hpp,Heimdall-SBOM_heimdall,src/common/Profiler.hpp,478,"Consider replacing this macro with a function accepting ""std::source_location"" as a parameter.",OPEN,1min,1min,tbakker@example.com,since-c++20,2025-07-13 13:13:28,2025-07-13 13:50:37,
AZgEDfzRWWROGYDt1QCe,cpp:S1854,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/PerformanceBenchmark.cpp,Heimdall-SBOM_heimdall,src/tools/PerformanceBenchmark.cpp,421,Value stored to 'iterations' is never read,OPEN,1min,1min,tbakker@example.com,"cert,cwe,symbolic-execution,unused",2025-07-13 13:13:28,2025-07-13 13:50:37,
AZgBBqmKovJoIrthWcTl,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,167,"Do not use the constructor's initializer list for data member ""pImpl"". Use the in-class initializer instead.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-12 23:39:40,2025-07-12 23:39:40,
AZgBBqntovJoIrthWcTp,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.hpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.hpp,124,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-12 23:39:40,2025-07-12 23:39:40,
AZgBBqnZovJoIrthWcTn,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.hpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.hpp,56,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-12 23:39:40,2025-07-12 23:39:40,
AZgBBqrlovJoIrthWcUO,cpp:S1854,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldAdapter.cpp,Heimdall-SBOM_heimdall,src/gold/GoldAdapter.cpp,336,Value stored to 'isVersion' is never read,OPEN,1min,1min,tbakker@example.com,"cert,cwe,symbolic-execution,unused",2025-07-12 23:39:40,2025-07-12 23:39:40,
AZgBBqrFovJoIrthWcT7,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,113,"Remove this use of the constructor's initializer list for data member ""verbose"". It is redundant with the in-class initializer.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-12 23:39:40,2025-07-12 23:39:40,
AZgBBqrFovJoIrthWcT8,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,113,"Do not use the constructor's initializer list for data member ""adapter"". Use the in-class initializer instead.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-12 23:39:40,2025-07-12 23:39:40,
AZgBBqrFovJoIrthWcT6,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,128,"Do not use the constructor's initializer list for data member ""pImpl"". Use the in-class initializer instead.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-12 23:39:40,2025-07-12 23:39:40,
AZgBBqrFovJoIrthWcUA,cpp:S2738,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,138,"""catch"" a specific exception type.",OPEN,20min,20min,tbakker@example.com,error-handling,2025-07-12 23:39:40,2025-07-12 23:39:40,
AZgBBqpzovJoIrthWcT2,cpp:S1854,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDAdapter.cpp,Heimdall-SBOM_heimdall,src/lld/LLDAdapter.cpp,480,Value stored to 'isVersion' is never read,OPEN,1min,1min,tbakker@example.com,"cert,cwe,symbolic-execution,unused",2025-07-12 23:39:40,2025-07-12 23:39:40,
AZgBBqqcovJoIrthWcT3,cpp:S1117,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,306,declaration shadows a variable in namespace '(anonymous)',OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,pitfall,suspicious",2025-07-12 23:39:40,2025-07-12 23:39:40,
AZgBBqqcovJoIrthWcT4,cpp:S1117,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,315,declaration shadows a variable in namespace '(anonymous)',OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,pitfall,suspicious",2025-07-12 23:39:40,2025-07-12 23:39:40,
AZf3AavLamoZJ6FAlvS4,cpp:S6003,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,271,"Replace this use of ""push_back"" with ""emplace_back"".",OPEN,2min,2min,tbakker@example.com,"clumsy,performance,since-c++11",2025-07-11 01:00:33,2025-07-11 01:00:33,
AZf24RynbfoWNRtW8bY4,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.hpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.hpp,96,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-11 00:24:44,2025-07-11 00:24:44,
AZf24RxnbfoWNRtW8bY3,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.hpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.hpp,89,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-11 00:24:44,2025-07-11 00:24:44,
AZf24R07bfoWNRtW8bZI,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,149,Define each identifier in a dedicated statement.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,convention",2025-07-11 00:24:44,2025-07-11 00:24:44,
AZf24R07bfoWNRtW8bZL,cpp:S6003,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,202,"Replace this use of ""push_back"" with ""emplace_back"".",OPEN,2min,2min,tbakker@example.com,"clumsy,performance,since-c++11",2025-07-11 00:24:44,2025-07-11 00:24:44,
AZf24R07bfoWNRtW8bZK,cpp:S6003,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,210,"Replace this use of ""push_back"" with ""emplace_back"".",OPEN,2min,2min,tbakker@example.com,"clumsy,performance,since-c++11",2025-07-11 00:24:44,2025-07-11 00:24:44,
AZf24R2bbfoWNRtW8bZM,cpp:S1481,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/llvm_symbols.cpp,Heimdall-SBOM_heimdall,src/tools/llvm_symbols.cpp,42,unused variable 'DisableABIBreakingChecks',OPEN,5min,5min,tbakker@example.com,unused,2025-07-11 00:24:44,2025-07-11 00:24:44,
AZf0SG9WamoZJ6FAQuVv,cpp:S5812,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/llvm/llvm_detector.cpp,Heimdall-SBOM_heimdall,src/llvm/llvm_detector.cpp,7,Concatenate this namespace with the nested one.,OPEN,5min,5min,cursoragent@cursor.com,"confusing,since-c++17",2025-07-10 12:18:24,2025-07-10 12:18:31,
AZf0SG9WamoZJ6FAQuVw,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/llvm/llvm_detector.cpp,Heimdall-SBOM_heimdall,src/llvm/llvm_detector.cpp,30,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,cursoragent@cursor.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-10 12:18:24,2025-07-10 12:18:31,
AZf0SG9qamoZJ6FAQuVx,cpp:S5812,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/llvm/llvm_detector.hpp,Heimdall-SBOM_heimdall,src/llvm/llvm_detector.hpp,39,Concatenate this namespace with the nested one.,OPEN,5min,5min,cursoragent@cursor.com,"confusing,since-c++17",2025-07-10 12:18:24,2025-07-10 12:18:31,
AZf0SG3oamoZJ6FAQuVF,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,40,"Do not use the constructor's initializer list for data member ""sbomGenerator"". Use the in-class initializer instead.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-09 12:51:57,2025-07-10 11:59:39,
AZf0SG-aamoZJ6FAQuV7,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldAdapter.cpp,Heimdall-SBOM_heimdall,src/gold/GoldAdapter.cpp,32,"Do not use the constructor's initializer list for data member ""sbomGenerator"". Use the in-class initializer instead.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-09 12:51:57,2025-07-10 11:59:39,
AZf0SG-aamoZJ6FAQuV6,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldAdapter.cpp,Heimdall-SBOM_heimdall,src/gold/GoldAdapter.cpp,182,"Do not use the constructor's initializer list for data member ""pImpl"". Use the in-class initializer instead.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-09 12:51:57,2025-07-10 11:59:39,
AZf0SG8famoZJ6FAQuVc,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDAdapter.cpp,Heimdall-SBOM_heimdall,src/lld/LLDAdapter.cpp,336,"Do not use the constructor's initializer list for data member ""pImpl"". Use the in-class initializer instead.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-09 12:51:57,2025-07-10 11:59:39,
AZf0SG-0amoZJ6FAQuV8,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,433,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,tbakker@example.com,"clumsy,cppcoreguidelines,since-c++17",2025-07-09 12:51:57,2025-07-10 11:59:39,
AZf0SG68amoZJ6FAQuVQ,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1708,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-09 04:49:07,2025-07-10 11:59:39,
AZf0SG68amoZJ6FAQuVR,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1712,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-09 04:49:07,2025-07-10 11:59:39,
AZf0SG68amoZJ6FAQuVS,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1716,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-09 04:49:07,2025-07-10 11:59:39,
AZgk-JlwhTOwlKW6cbVh,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1759,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-09 04:49:07,2025-07-10 11:59:39,
AZgk-JlwhTOwlKW6cbVi,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1763,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-09 04:49:07,2025-07-10 11:59:39,
AZgk-JlwhTOwlKW6cbVj,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1767,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-09 04:49:07,2025-07-10 11:59:39,
AZf0SG68amoZJ6FAQuVT,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,2094,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-09 04:49:07,2025-07-10 11:59:39,
AZf0SG68amoZJ6FAQuVU,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,2112,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-09 04:49:07,2025-07-10 11:59:39,
AZf0SG-AamoZJ6FAQuV1,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,38,Global variables should be const.,OPEN,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-09 04:49:07,2025-07-10 11:59:39,
AZg8ImtTcq9bBT9oyCXb,cpp:S7035,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/compat/compatibility.hpp,Heimdall-SBOM_heimdall,src/compat/compatibility.hpp,723,"Prefer ""std::to_underlying"" to ""std::underlying_type_t"" to cast enums to their underlying type.",OPEN,15min,15min,cursoragent@cursor.com,"pitfall,since-c++23",2025-07-08 23:32:36,2025-07-10 11:59:39,
AZfsoJoOZX9hALJ38m7S,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,140,Extract the assignment from this expression.,OPEN,5min,5min,cursoragent@cursor.com,"based-on-misra,cert,cwe,suspicious",2025-07-08 18:16:33,2025-07-09 00:38:55,
AZfiJ2rqUR2juKVPuW6Z,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,232,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06 23:50:48,2025-07-11 00:24:44,
AZfiJ2rqUR2juKVPuW6b,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,285,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-06 23:50:48,2025-07-06 23:50:48,
AZfiJ2s2UR2juKVPuW6r,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.hpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.hpp,217,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-06 23:50:48,2025-07-06 23:50:48,
AZfiJ2uSUR2juKVPuW6u,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,34,Global variables should be const.,OPEN,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-06 23:50:48,2025-07-06 23:50:48,
AZfh0jFY_yZdEi8IfXoQ,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,460,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jFY_yZdEi8IfXoT,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,512,Define each identifier in a dedicated statement.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,convention",2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jFY_yZdEi8IfXoU,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,512,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jFY_yZdEi8IfXoY,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,581,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jFY_yZdEi8IfXob,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,679,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jFY_yZdEi8IfXod,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,688,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jFY_yZdEi8IfXoe,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,758,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jFY_yZdEi8IfXof,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,760,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jFY_yZdEi8IfXoh,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,775,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jFY_yZdEi8IfXoi,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,860,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jFY_yZdEi8IfXoj,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,862,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jFY_yZdEi8IfXok,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,863,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jFY_yZdEi8IfXol,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,864,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jFY_yZdEi8IfXom,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,865,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jFY_yZdEi8IfXon,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,871,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jFY_yZdEi8IfXoo,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,872,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jFY_yZdEi8IfXop,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,873,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jFY_yZdEi8IfXoq,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,874,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jGK_yZdEi8IfXoy,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.hpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.hpp,79,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jGK_yZdEi8IfXo0,cpp:S6186,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.hpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.hpp,153,"Keep operator== and remove operator!= for operand types ""SBOMComponent"" and ""SBOMComponent"".",OPEN,5min,5min,tbakker@example.com,"clumsy,pitfall,since-c++20",2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jGK_yZdEi8IfXoz,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.hpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.hpp,314,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jHE_yZdEi8IfXo8,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,136,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jHE_yZdEi8IfXpC,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,460,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jHE_yZdEi8IfXpG,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,526,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jHE_yZdEi8IfXpD,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,530,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jHE_yZdEi8IfXpF,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,587,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jHE_yZdEi8IfXpA,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,591,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfh0jHE_yZdEi8IfXpH,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,595,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06 22:17:41,2025-07-06 22:17:49,
AZfhrTMY_yZdEi8Iese3,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1023,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06 21:36:51,2025-07-06 21:36:51,
AZfhkua10DsrBC_W7hIs,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,908,"This function should be declared ""const"".",OPEN,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06 21:07:55,2025-07-06 21:07:55,
AZfheZP3PrcFnnHeXuq5,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDAdapter.cpp,Heimdall-SBOM_heimdall,src/lld/LLDAdapter.cpp,86,"Do not use the constructor's initializer list for data member ""sbomGenerator"". Use the in-class initializer instead.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-06 20:41:46,2025-07-06 20:41:46,
AZfgPZAdPrcFnnHeQ4ue,cpp:S3630,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2609,"Replace ""reinterpret_cast"" with a safer operation.",OPEN,20min,20min,tbakker@example.com,"cppcoreguidelines,pitfall",2025-07-06 14:56:40,2025-07-06 14:56:40,
AZfgPZAdPrcFnnHeQ4uf,cpp:S3630,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2610,"Replace ""reinterpret_cast"" with a safer operation.",OPEN,20min,20min,tbakker@example.com,"cppcoreguidelines,pitfall",2025-07-06 14:56:40,2025-07-06 14:56:40,
AZfgPZAdPrcFnnHeQ4ug,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2677,Define each identifier in a dedicated statement.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,convention",2025-07-06 14:56:40,2025-07-06 14:56:40,
AZfgPZAdPrcFnnHeQ4uh,cpp:S3630,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2688,"Replace ""reinterpret_cast"" with a safer operation.",OPEN,20min,20min,tbakker@example.com,"cppcoreguidelines,pitfall",2025-07-06 14:56:40,2025-07-06 14:56:40,
AZfgE1yfqk9ledNQJRHd,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,1002,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06 14:08:55,2025-07-06 14:08:55,
AZf0SG-AamoZJ6FAQuVy,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,35,Global variables should be const.,OPEN,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-06 14:06:27,2025-07-10 11:59:39,
AZf0SG-AamoZJ6FAQuVz,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,36,Global variables should be const.,OPEN,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-06 14:06:27,2025-07-10 11:59:39,
AZf0SG-AamoZJ6FAQuV0,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,37,Global variables should be const.,OPEN,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-06 14:06:27,2025-07-10 11:59:39,
AZf0SG89amoZJ6FAQuVe,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,47,Global variables should be const.,OPEN,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-06 14:06:27,2025-07-10 11:59:39,
AZf0SG89amoZJ6FAQuVf,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,48,Global variables should be const.,OPEN,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-06 14:06:27,2025-07-10 11:59:39,
AZf0SG89amoZJ6FAQuVg,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,49,Global variables should be const.,OPEN,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-06 14:06:27,2025-07-10 11:59:39,
AZf0SG89amoZJ6FAQuVh,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,50,Global variables should be const.,OPEN,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-06 14:06:27,2025-07-10 11:59:39,
AZf0SG89amoZJ6FAQuVi,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,51,Global variables should be const.,OPEN,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-06 14:06:27,2025-07-10 11:59:39,
AZff8_GAqk9ledNQIyhx,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,255,"Remove this use of the constructor's initializer list for data member ""wasProcessed"". It is redundant with the in-class initializer.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-06 13:34:33,2025-07-06 13:34:33,
AZff8_GAqk9ledNQIyhy,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,256,"Remove this use of the constructor's initializer list for data member ""detectedBy"". It is redundant with the in-class initializer.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-06 13:34:33,2025-07-06 13:34:33,
AZff8_GAqk9ledNQIyhz,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,257,"Remove this use of the constructor's initializer list for data member ""isSystemLibrary"". It is redundant with the in-class initializer.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-06 13:34:33,2025-07-06 13:34:33,
AZff8_GAqk9ledNQIyh0,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,258,"Remove this use of the constructor's initializer list for data member ""containsDebugInfo"". It is redundant with the in-class initializer.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-06 13:34:33,2025-07-06 13:34:33,
AZff8_GRqk9ledNQIyh_,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,757,"This function should be declared ""const"".",OPEN,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06 13:34:33,2025-07-06 13:34:33,
AZff8_FEqk9ledNQIyf8,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,130,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,tbakker@example.com,"clumsy,since-c++20",2025-07-06 13:34:33,2025-07-06 13:34:33,
AZff8_Fwqk9ledNQIyhi,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,381,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,tbakker@example.com,"clumsy,since-c++20",2025-07-06 13:34:33,2025-07-06 13:34:33,
AZff8_Gnqk9ledNQIyiT,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,903,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06 13:34:33,2025-07-06 13:34:33,
AZff8_Gnqk9ledNQIyiU,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,906,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06 13:34:33,2025-07-06 13:34:33,
AZff8_HEqk9ledNQIyip,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldAdapter.cpp,Heimdall-SBOM_heimdall,src/gold/GoldAdapter.cpp,71,"Replace with the version of ""std::ranges::find"" that takes a range.",OPEN,2min,2min,tbakker@example.com,"bad-practice,clumsy,since-c++20",2025-07-06 13:34:33,2025-07-06 13:34:33,
AZff8_HPqk9ledNQIyit,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,394,"Replace with the version of ""std::ranges::find"" that takes a range.",OPEN,2min,2min,tbakker@example.com,"bad-practice,clumsy,since-c++20",2025-07-06 13:34:33,2025-07-06 13:34:33,
AZff8_HPqk9ledNQIyiu,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,434,"Replace with the version of ""std::ranges::find"" that takes a range.",OPEN,2min,2min,tbakker@example.com,"bad-practice,clumsy,since-c++20",2025-07-06 13:34:33,2025-07-06 13:34:33,
AZff8_Gwqk9ledNQIyil,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDAdapter.cpp,Heimdall-SBOM_heimdall,src/lld/LLDAdapter.cpp,253,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,tbakker@example.com,"clumsy,since-c++20",2025-07-06 13:34:33,2025-07-06 13:34:33,
AZf0SG89amoZJ6FAQuVm,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,186,"Replace with the version of ""std::ranges::find"" that takes a range.",OPEN,2min,2min,tbakker@example.com,"bad-practice,clumsy,since-c++20",2025-07-06 13:34:26,2025-07-10 11:59:39,
AZff4d-h6D22xePu4wUA,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,33,Global variables should be const.,OPEN,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-06 00:08:20,2025-07-06 13:14:37,
AZff4d-E6D22xePu4wSK,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,72,Global variables should be const.,OPEN,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-05 22:52:41,2025-07-06 13:14:37,
AZff4d8f6D22xePu4wPM,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,810,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-05 22:24:08,2025-07-06 13:14:37,
AZff4d8f6D22xePu4wPR,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,855,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-05 22:24:08,2025-07-06 13:14:37,
AZff4d8f6D22xePu4wPT,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,869,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-05 22:24:08,2025-07-06 13:14:37,
AZff4d8f6D22xePu4wPc,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1304,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-05 22:24:08,2025-07-06 13:14:37,
AZff4d8f6D22xePu4wPd,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1382,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-05 22:24:08,2025-07-06 13:14:37,
AZff4d-E6D22xePu4wSH,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,66,Global variables should be const.,OPEN,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-05 22:05:27,2025-07-06 13:14:37,
AZff4d-E6D22xePu4wSI,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,67,Global variables should be const.,OPEN,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-05 22:05:27,2025-07-06 13:14:37,
AZff4d-E6D22xePu4wSJ,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,68,Global variables should be const.,OPEN,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-05 22:05:27,2025-07-06 13:14:37,
AZff4d8S6D22xePu4wO-,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.hpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.hpp,52,Global variables should be const.,OPEN,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-05 22:05:27,2025-07-06 13:14:37,
AZff4d8S6D22xePu4wO_,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.hpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.hpp,53,Global variables should be const.,OPEN,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-05 22:05:27,2025-07-06 13:14:37,
AZff4d8S6D22xePu4wPA,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.hpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.hpp,54,Global variables should be const.,OPEN,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-05 22:05:27,2025-07-06 13:14:37,
AZff4d9p6D22xePu4wQ1,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3080,"Use the init-statement to declare ""dirName"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-05 21:07:56,2025-07-06 13:14:37,
AZff4d9p6D22xePu4wQ3,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3080,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05 21:07:56,2025-07-06 13:14:37,
AZff4d9p6D22xePu4wQ5,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3119,"Use the init-statement to declare ""dirName"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-05 21:07:56,2025-07-06 13:14:37,
AZff4d9p6D22xePu4wQ8,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3119,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05 21:07:56,2025-07-06 13:14:37,
AZff4d9p6D22xePu4wQ9,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3120,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05 21:07:56,2025-07-06 13:14:37,
AZff4d9p6D22xePu4wQ-,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3159,"Use the init-statement to declare ""dirName"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-05 21:07:56,2025-07-06 13:14:37,
AZff4d9p6D22xePu4wRA,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3159,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05 21:07:56,2025-07-06 13:14:37,
AZff4d8f6D22xePu4wPI,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,580,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,tbakker@example.com,"clumsy,since-c++20",2025-07-05 15:31:55,2025-07-06 13:14:37,
AZff4d9p6D22xePu4wQX,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2478,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-05 15:31:55,2025-07-06 13:14:37,
AZff4d9p6D22xePu4wQZ,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2499,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-05 15:31:55,2025-07-06 13:14:37,
AZff4d9p6D22xePu4wQS,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2531,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,tbakker@example.com,"clumsy,since-c++20",2025-07-05 15:31:55,2025-07-06 13:14:37,
AZff4d9p6D22xePu4wQi,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2571,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,tbakker@example.com,"clumsy,since-c++20",2025-07-05 15:31:55,2025-07-06 13:14:37,
AZff4d9p6D22xePu4wQQ,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2718,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-05 15:31:55,2025-07-06 13:14:37,
AZff4d9p6D22xePu4wQR,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2732,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-05 15:31:55,2025-07-06 13:14:37,
AZff4d9p6D22xePu4wQj,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2782,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,tbakker@example.com,"clumsy,since-c++20",2025-07-05 15:31:55,2025-07-06 13:14:37,
AZff4d9p6D22xePu4wQz,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,3055,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05 15:31:55,2025-07-06 13:14:37,
AZff4d9x6D22xePu4wRc,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,45,"Use the transparent equality ""std::equal_to<>"" and a custom transparent heterogeneous hasher with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-05 15:31:55,2025-07-06 13:14:37,
AZff4d-Q6D22xePu4wSj,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,356,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-05 15:31:55,2025-07-06 13:14:37,
AZff4d8O6D22xePu4wOx,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,41,"Remove this use of the constructor's initializer list for data member ""verbose"". It is redundant with the in-class initializer.",OPEN,10min,10min,trevor.bakker@uta.edu,"cppcoreguidelines,performance",2025-07-05 00:03:59,2025-07-06 13:14:37,
AZff4d8O6D22xePu4wOy,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,42,"Remove this use of the constructor's initializer list for data member ""extractDebugInfo"". It is redundant with the in-class initializer.",OPEN,10min,10min,trevor.bakker@uta.edu,"cppcoreguidelines,performance",2025-07-05 00:03:59,2025-07-06 13:14:37,
AZff4d8O6D22xePu4wO4,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,330,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-05 00:03:59,2025-07-06 13:14:37,
AZff4d8O6D22xePu4wO5,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,331,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-05 00:03:59,2025-07-06 13:14:37,
AZff4d8O6D22xePu4wO8,cpp:S6003,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,444,"Replace this use of ""push_back"" with ""emplace_back"".",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,performance,since-c++11",2025-07-05 00:03:59,2025-07-06 13:14:37,
AZff4d8O6D22xePu4wO9,cpp:S6003,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,448,"Replace this use of ""push_back"" with ""emplace_back"".",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,performance,since-c++11",2025-07-05 00:03:59,2025-07-06 13:14:37,
AZff4d9x6D22xePu4wRj,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,525,Define each identifier in a dedicated statement.,OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,convention",2025-07-05 00:03:59,2025-07-06 13:14:37,
AZff4d9x6D22xePu4wRk,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,526,Define each identifier in a dedicated statement.,OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,convention",2025-07-05 00:03:59,2025-07-06 13:14:37,
AZff4d9x6D22xePu4wRo,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,1026,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@uta.edu,since-c++11,2025-07-05 00:03:59,2025-07-06 13:14:37,
AZff4d-Q6D22xePu4wSd,cpp:S3806,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,40,non-portable path to file '<Windows.h>'; specified path differs in case from file name on disk,OPEN,5min,5min,trevor.bakker@uta.edu,pitfall,2025-07-05 00:03:59,2025-07-06 13:14:37,
AZff4d-Q6D22xePu4wSi,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,327,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,trevor.bakker@uta.edu,"bad-practice,clumsy,cppcoreguidelines",2025-07-05 00:03:59,2025-07-06 13:14:37,
AZff4d-Q6D22xePu4wSk,cpp:S6495,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,371,"""std::print"" or ""std::format"" should be used instead of standard output manipulators",OPEN,5min,5min,trevor.bakker@uta.edu,"clumsy,performance,since-c++20",2025-07-05 00:03:59,2025-07-06 13:14:37,
AZff4d-Q6D22xePu4wSt,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,623,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,trevor.bakker@uta.edu,"bad-practice,clumsy,cppcoreguidelines",2025-07-05 00:03:59,2025-07-06 13:14:37,
AZff4d-Q6D22xePu4wSe,cpp:S1874,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,638,"'getenv' is deprecated: This function or variable may be unsafe. Consider using _dupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.",OPEN,15min,15min,trevor.bakker@uta.edu,"cert,cwe,obsolete",2025-07-05 00:03:59,2025-07-06 13:14:37,
AZff4d-Q6D22xePu4wSv,cpp:S6003,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,652,"Replace this use of ""push_back"" with ""emplace_back"".",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,performance,since-c++11",2025-07-05 00:03:59,2025-07-06 13:14:37,
AZff4d-Q6D22xePu4wSw,cpp:S6003,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,653,"Replace this use of ""push_back"" with ""emplace_back"".",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,performance,since-c++11",2025-07-05 00:03:59,2025-07-06 13:14:37,
AZff4d-Q6D22xePu4wS9,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,926,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,trevor.bakker@uta.edu,"bad-practice,clumsy,cppcoreguidelines",2025-07-05 00:03:59,2025-07-06 13:14:37,
AZff4d-Q6D22xePu4wTA,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,1025,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-05 00:03:59,2025-07-06 13:14:37,
AZff4d-Q6D22xePu4wTC,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,1032,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-05 00:03:59,2025-07-06 13:14:37,
AZff4d-d6D22xePu4wTx,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldAdapter.cpp,Heimdall-SBOM_heimdall,src/gold/GoldAdapter.cpp,56,"Replace with the version of ""std::ranges::find"" that takes a range.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,clumsy,since-c++20",2025-07-05 00:03:59,2025-07-06 13:14:37,
AZff4d-h6D22xePu4wT2,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,32,Global variables should be const.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cppcoreguidelines,pitfall",2025-07-05 00:03:59,2025-07-06 13:14:37,
AZff4d-Z6D22xePu4wTW,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,46,Global variables should be const.,OPEN,20min,20min,trevor.bakker@uta.edu,"bad-practice,cppcoreguidelines,pitfall",2025-07-05 00:03:59,2025-07-06 13:14:37,
