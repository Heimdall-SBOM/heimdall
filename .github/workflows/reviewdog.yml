name: clang-format and clang-tidy reviewdog

# Security: All actions are pinned to specific commit SHAs to prevent supply chain attacks
# Update SHAs periodically or use tools like Dependabot to manage them automatically

on:
  pull_request:
    branches:
      - main  # Adjust this if needed

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  clang-tools:
    name: Clang Tools via Reviewdog
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
        with:
          submodules: true
          fetch-depth: 0

      - name: Set up Python (for run-clang-tidy.py)
        uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236 # v4.7.1
        with:
          python-version: '3.x'

      - name: Install clang tools and reviewdog
        run: |
          sudo apt update
          sudo apt install -y clang-format clang-tidy cmake ninja-build curl
          # Security: Pin reviewdog installer to specific commit SHA to prevent supply chain attacks
          # Updated after March 2025 reviewdog compromise - use post-incident commit
          curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/fd59714416d6d9a1c0692d872e38e7f8448df4fc/install.sh | sh -s -- -b /usr/local/bin
          pip install PyYAML

      ############################################
      # 1. CLANG-FORMAT via reviewdog
      ############################################
      - name: Run clang-format with reviewdog
        run: |
          # Get changed files from GitHub context
          FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} | grep -E '\.(c|cpp|h|hpp)$' || true)
          echo "Changed files: $FILES"
          
          if [ -n "$FILES" ]; then
            ISSUE_COUNT=0
            for file in $FILES; do
              if [ -f "$file" ]; then
                echo "Checking format for: $file"
                
                # Create formatted version
                FORMATTED=$(mktemp)
                clang-format "$file" > "$FORMATTED"
                
                # Compare line by line and post individual issues
                diff -u "$file" "$FORMATTED" | grep "^-" | grep -v "^---" | while read -r line; do
                  # Extract the problematic line content
                  ORIGINAL_LINE=$(echo "$line" | sed 's/^-//')
                  
                  # Find line number in original file
                  LINE_NUM=$(grep -n -F "$ORIGINAL_LINE" "$file" | head -1 | cut -d: -f1)
                  
                  if [ -n "$LINE_NUM" ] && [ "$LINE_NUM" != "" ]; then
                    ISSUE_COUNT=$((ISSUE_COUNT + 1))
                    
                    # Determine the type of formatting issue
                    if echo "$ORIGINAL_LINE" | grep -q "=.*[^[:space:]].*=\|[^[:space:]].*=\|=.*[^[:space:]]"; then
                      MESSAGE="missing spaces around = operator"
                    elif echo "$ORIGINAL_LINE" | grep -q "%.*[^[:space:]]\|[^[:space:]].*%"; then
                      MESSAGE="missing spaces around % operator"  
                    elif echo "$ORIGINAL_LINE" | grep -q ",[^[:space:]]"; then
                      MESSAGE="missing space after comma"
                    else
                      MESSAGE="formatting issue detected"
                    fi
                    
                    echo "$file:$LINE_NUM:1: warning: $MESSAGE" | \
                    reviewdog -efm="%f:%l:%c: %tarning: %m" -name="clang-format-$ISSUE_COUNT" -reporter=github-pr-review -fail-on-error=false
                  fi
                done
                
                rm -f "$FORMATTED"
              fi
            done
          else
            echo "No C++ files changed, skipping clang-format"
          fi
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      ############################################
      # 2. CLANG-TIDY via reviewdog
      ############################################
      - name: Run clang-tidy with reviewdog
        timeout-minutes: 8
        run: |
          # Generate proper compile_commands.json with cmake
          cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -S . -B build

          # Security: Pin clang-tidy script to specific commit SHA to prevent supply chain attacks
          # Using known stable LLVM commit instead of main branch
          wget https://raw.githubusercontent.com/llvm/llvm-project/6009708b4367171ccdbf4b5905cb6a803753fe18/clang-tools-extra/clang-tidy/tool/run-clang-tidy.py
          chmod +x run-clang-tidy.py
          mkdir -p tidy-fixes
          
          # Get changed files
          FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} | grep -E '\.(c|cpp|h|hpp)$' || true)
          echo "Changed files for clang-tidy: $FILES"
          
          if [ -n "$FILES" ]; then
            ISSUE_COUNT=0
            for file in $FILES; do
              if [ -f "$file" ]; then
                echo "Running clang-tidy on: $file"
                
                # Run clang-tidy with proper compilation database
                TIDY_OUTPUT=$(mktemp)
                timeout 240s clang-tidy --config-file=.clang-tidy -p build "$file" 2>&1 | grep "warning:\|error:" > "$TIDY_OUTPUT" || true
                
                # Process each warning/error individually
                while IFS= read -r line; do
                  if [ -n "$line" ]; then
                    ISSUE_COUNT=$((ISSUE_COUNT + 1))
                    echo "$line" | reviewdog -efm="%f:%l:%c: %tarning: %m" -efm="%f:%l:%c: %trror: %m" -name="clang-tidy-$ISSUE_COUNT" -reporter=github-pr-review -fail-on-error=false
                  fi
                done < "$TIDY_OUTPUT"
                
                rm -f "$TIDY_OUTPUT"
              fi
            done
          else
            echo "No C++ files changed, skipping clang-tidy"
          fi
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
